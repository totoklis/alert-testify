"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GateApiV4Auth = exports.OAuth = exports.ApiKeyAuth = exports.HttpBearerAuth = exports.HttpBasicAuth = exports.ObjectSerializer = void 0;
__exportStar(require("./accountBalance"), exports);
__exportStar(require("./accountDetail"), exports);
__exportStar(require("./accountDetailKey"), exports);
__exportStar(require("./accountRateLimit"), exports);
__exportStar(require("./agencyCommission"), exports);
__exportStar(require("./agencyCommissionHistory"), exports);
__exportStar(require("./agencyTransaction"), exports);
__exportStar(require("./agencyTransactionHistory"), exports);
__exportStar(require("./autoRepaySetting"), exports);
__exportStar(require("./batchAmendItem"), exports);
__exportStar(require("./batchAmendOrderReq"), exports);
__exportStar(require("./batchFuturesOrder"), exports);
__exportStar(require("./batchOrder"), exports);
__exportStar(require("./borrowCurrencyInfo"), exports);
__exportStar(require("./brokerCommission"), exports);
__exportStar(require("./brokerCommission1"), exports);
__exportStar(require("./brokerTransaction"), exports);
__exportStar(require("./brokerTransaction1"), exports);
__exportStar(require("./cancelBatchOrder"), exports);
__exportStar(require("./cancelOrderResult"), exports);
__exportStar(require("./collateralAdjust"), exports);
__exportStar(require("./collateralAdjustRes"), exports);
__exportStar(require("./collateralAlign"), exports);
__exportStar(require("./collateralCurrency"), exports);
__exportStar(require("./collateralCurrencyInfo"), exports);
__exportStar(require("./collateralCurrencyRes"), exports);
__exportStar(require("./collateralCurrentRate"), exports);
__exportStar(require("./collateralFixRate"), exports);
__exportStar(require("./collateralLoanCurrency"), exports);
__exportStar(require("./collateralLtv"), exports);
__exportStar(require("./collateralOrder"), exports);
__exportStar(require("./collateralRecord"), exports);
__exportStar(require("./contract"), exports);
__exportStar(require("./contractStat"), exports);
__exportStar(require("./convertSmallBalance"), exports);
__exportStar(require("./countdownCancelAllFuturesTask"), exports);
__exportStar(require("./countdownCancelAllOptionsTask"), exports);
__exportStar(require("./countdownCancelAllSpotTask"), exports);
__exportStar(require("./createCollateralOrder"), exports);
__exportStar(require("./createMultiCollateralOrder"), exports);
__exportStar(require("./createUniLend"), exports);
__exportStar(require("./createUniLoan"), exports);
__exportStar(require("./crossMarginAccount"), exports);
__exportStar(require("./crossMarginAccountBook"), exports);
__exportStar(require("./crossMarginBalance"), exports);
__exportStar(require("./crossMarginBalance1"), exports);
__exportStar(require("./crossMarginCurrency"), exports);
__exportStar(require("./crossMarginLoan"), exports);
__exportStar(require("./crossMarginRepayRequest"), exports);
__exportStar(require("./crossMarginRepayment"), exports);
__exportStar(require("./crossMarginTransferable"), exports);
__exportStar(require("./currency"), exports);
__exportStar(require("./currencyChain"), exports);
__exportStar(require("./currencyPair"), exports);
__exportStar(require("./currencyQuota"), exports);
__exportStar(require("./debitFee"), exports);
__exportStar(require("./deliveryCandlestick"), exports);
__exportStar(require("./deliveryContract"), exports);
__exportStar(require("./deliverySettlement"), exports);
__exportStar(require("./deliveryTicker"), exports);
__exportStar(require("./depositAddress"), exports);
__exportStar(require("./depositRecord"), exports);
__exportStar(require("./dualGetOrders"), exports);
__exportStar(require("./dualGetPlans"), exports);
__exportStar(require("./eth2RateList"), exports);
__exportStar(require("./eth2Swap"), exports);
__exportStar(require("./flashSwapCurrencyPair"), exports);
__exportStar(require("./flashSwapOrder"), exports);
__exportStar(require("./flashSwapOrderPreview"), exports);
__exportStar(require("./flashSwapOrderRequest"), exports);
__exportStar(require("./flashSwapPreviewRequest"), exports);
__exportStar(require("./fundingAccount"), exports);
__exportStar(require("./fundingRateRecord"), exports);
__exportStar(require("./futureCancelOrderResult"), exports);
__exportStar(require("./futuresAccount"), exports);
__exportStar(require("./futuresAccountBook"), exports);
__exportStar(require("./futuresAccountHistory"), exports);
__exportStar(require("./futuresAutoDeleverage"), exports);
__exportStar(require("./futuresBatchAmendOrderRequest"), exports);
__exportStar(require("./futuresCandlestick"), exports);
__exportStar(require("./futuresFee"), exports);
__exportStar(require("./futuresIndexConstituents"), exports);
__exportStar(require("./futuresInitialOrder"), exports);
__exportStar(require("./futuresLimitRiskTiers"), exports);
__exportStar(require("./futuresLiqOrder"), exports);
__exportStar(require("./futuresLiquidate"), exports);
__exportStar(require("./futuresOrder"), exports);
__exportStar(require("./futuresOrderAmendment"), exports);
__exportStar(require("./futuresOrderBook"), exports);
__exportStar(require("./futuresOrderBookItem"), exports);
__exportStar(require("./futuresPremiumIndex"), exports);
__exportStar(require("./futuresPriceTrigger"), exports);
__exportStar(require("./futuresPriceTriggeredOrder"), exports);
__exportStar(require("./futuresTicker"), exports);
__exportStar(require("./futuresTrade"), exports);
__exportStar(require("./indexConstituent"), exports);
__exportStar(require("./inlineObject"), exports);
__exportStar(require("./inlineResponse200"), exports);
__exportStar(require("./inlineResponse2001"), exports);
__exportStar(require("./insuranceRecord"), exports);
__exportStar(require("./ledgerRecord"), exports);
__exportStar(require("./liquidateOrder"), exports);
__exportStar(require("./marginAccount"), exports);
__exportStar(require("./marginAccountBook"), exports);
__exportStar(require("./marginAccountCurrency"), exports);
__exportStar(require("./marginLeverageTier"), exports);
__exportStar(require("./marginMarketLeverage"), exports);
__exportStar(require("./marginTiers"), exports);
__exportStar(require("./marginTransferable"), exports);
__exportStar(require("./maxUniBorrowable"), exports);
__exportStar(require("./mockFuturesOrder"), exports);
__exportStar(require("./mockFuturesPosition"), exports);
__exportStar(require("./mockMarginResult"), exports);
__exportStar(require("./mockOptionsOrder"), exports);
__exportStar(require("./mockOptionsPosition"), exports);
__exportStar(require("./mockRiskUnit"), exports);
__exportStar(require("./mockSpotBalance"), exports);
__exportStar(require("./mockSpotOrder"), exports);
__exportStar(require("./multiChainAddressItem"), exports);
__exportStar(require("./multiCollateralCurrency"), exports);
__exportStar(require("./multiCollateralItem"), exports);
__exportStar(require("./multiCollateralOrder"), exports);
__exportStar(require("./multiCollateralRecord"), exports);
__exportStar(require("./multiCollateralRecordCurrency"), exports);
__exportStar(require("./multiLoanItem"), exports);
__exportStar(require("./multiLoanRepayItem"), exports);
__exportStar(require("./multiRepayRecord"), exports);
__exportStar(require("./multiRepayResp"), exports);
__exportStar(require("./myFuturesTrade"), exports);
__exportStar(require("./myFuturesTradeTimeRange"), exports);
__exportStar(require("./openOrders"), exports);
__exportStar(require("./optionsAccount"), exports);
__exportStar(require("./optionsAccountBook"), exports);
__exportStar(require("./optionsCandlestick"), exports);
__exportStar(require("./optionsContract"), exports);
__exportStar(require("./optionsMMP"), exports);
__exportStar(require("./optionsMMPReset"), exports);
__exportStar(require("./optionsMySettlements"), exports);
__exportStar(require("./optionsMyTrade"), exports);
__exportStar(require("./optionsOrder"), exports);
__exportStar(require("./optionsPosition"), exports);
__exportStar(require("./optionsPositionClose"), exports);
__exportStar(require("./optionsPositionCloseOrder"), exports);
__exportStar(require("./optionsSettlement"), exports);
__exportStar(require("./optionsTicker"), exports);
__exportStar(require("./optionsUnderlying"), exports);
__exportStar(require("./optionsUnderlyingTicker"), exports);
__exportStar(require("./order"), exports);
__exportStar(require("./orderBook"), exports);
__exportStar(require("./orderCancel"), exports);
__exportStar(require("./orderPatch"), exports);
__exportStar(require("./orderResp"), exports);
__exportStar(require("./partnerCommissionHistory"), exports);
__exportStar(require("./partnerSub"), exports);
__exportStar(require("./partnerSubList"), exports);
__exportStar(require("./partnerTransactionHistory"), exports);
__exportStar(require("./patchUniLend"), exports);
__exportStar(require("./placeDualInvestmentOrder"), exports);
__exportStar(require("./position"), exports);
__exportStar(require("./positionClose"), exports);
__exportStar(require("./positionCloseOrder"), exports);
__exportStar(require("./profitLossRange"), exports);
__exportStar(require("./rebateUserInfo"), exports);
__exportStar(require("./repayCurrencyRes"), exports);
__exportStar(require("./repayLoan"), exports);
__exportStar(require("./repayMultiLoan"), exports);
__exportStar(require("./repayRecord"), exports);
__exportStar(require("./repayRecordCurrency"), exports);
__exportStar(require("./repayRecordLeftInterest"), exports);
__exportStar(require("./repayRecordRepaidCurrency"), exports);
__exportStar(require("./repayRecordTotalInterest"), exports);
__exportStar(require("./repayResp"), exports);
__exportStar(require("./riskUnits"), exports);
__exportStar(require("./savedAddress"), exports);
__exportStar(require("./smallBalance"), exports);
__exportStar(require("./smallBalanceHistory"), exports);
__exportStar(require("./spotAccount"), exports);
__exportStar(require("./spotAccountBook"), exports);
__exportStar(require("./spotCurrencyChain"), exports);
__exportStar(require("./spotFee"), exports);
__exportStar(require("./spotInsuranceHistory"), exports);
__exportStar(require("./spotPricePutOrder"), exports);
__exportStar(require("./spotPriceTrigger"), exports);
__exportStar(require("./spotPriceTriggeredOrder"), exports);
__exportStar(require("./stpGroup"), exports);
__exportStar(require("./stpGroupUser"), exports);
__exportStar(require("./structuredBuy"), exports);
__exportStar(require("./structuredGetProjectList"), exports);
__exportStar(require("./structuredOrderList"), exports);
__exportStar(require("./subAccount"), exports);
__exportStar(require("./subAccountBalance"), exports);
__exportStar(require("./subAccountCrossMarginBalance"), exports);
__exportStar(require("./subAccountFuturesBalance"), exports);
__exportStar(require("./subAccountKey"), exports);
__exportStar(require("./subAccountKeyPerms"), exports);
__exportStar(require("./subAccountMarginBalance"), exports);
__exportStar(require("./subAccountToSubAccount"), exports);
__exportStar(require("./subAccountTransfer"), exports);
__exportStar(require("./subCrossMarginAccount"), exports);
__exportStar(require("./subUserMode"), exports);
__exportStar(require("./systemTime"), exports);
__exportStar(require("./ticker"), exports);
__exportStar(require("./totalBalance"), exports);
__exportStar(require("./trade"), exports);
__exportStar(require("./tradeFee"), exports);
__exportStar(require("./transactionID"), exports);
__exportStar(require("./transfer"), exports);
__exportStar(require("./transferOrderStatus"), exports);
__exportStar(require("./transferablesResult"), exports);
__exportStar(require("./triggerOrderResponse"), exports);
__exportStar(require("./triggerTime"), exports);
__exportStar(require("./uidPushOrder"), exports);
__exportStar(require("./uidPushWithdrawal"), exports);
__exportStar(require("./uidPushWithdrawalResp"), exports);
__exportStar(require("./uniCurrency"), exports);
__exportStar(require("./uniCurrencyInterest"), exports);
__exportStar(require("./uniCurrencyPair"), exports);
__exportStar(require("./uniInterestMode"), exports);
__exportStar(require("./uniInterestRecord"), exports);
__exportStar(require("./uniLend"), exports);
__exportStar(require("./uniLendInterest"), exports);
__exportStar(require("./uniLendRecord"), exports);
__exportStar(require("./uniLoan"), exports);
__exportStar(require("./uniLoanInterestRecord"), exports);
__exportStar(require("./uniLoanRecord"), exports);
__exportStar(require("./unifiedAccount"), exports);
__exportStar(require("./unifiedBalance"), exports);
__exportStar(require("./unifiedBorrowable"), exports);
__exportStar(require("./unifiedBorrowable1"), exports);
__exportStar(require("./unifiedCurrency"), exports);
__exportStar(require("./unifiedDiscount"), exports);
__exportStar(require("./unifiedDiscountTiers"), exports);
__exportStar(require("./unifiedHistoryLoanRate"), exports);
__exportStar(require("./unifiedHistoryLoanRateRates"), exports);
__exportStar(require("./unifiedLeverageConfig"), exports);
__exportStar(require("./unifiedLeverageSetting"), exports);
__exportStar(require("./unifiedLoan"), exports);
__exportStar(require("./unifiedLoanRecord"), exports);
__exportStar(require("./unifiedLoanResult"), exports);
__exportStar(require("./unifiedMarginTiers"), exports);
__exportStar(require("./unifiedModeSet"), exports);
__exportStar(require("./unifiedPortfolioInput"), exports);
__exportStar(require("./unifiedPortfolioOutput"), exports);
__exportStar(require("./unifiedRiskUnits"), exports);
__exportStar(require("./unifiedSettings"), exports);
__exportStar(require("./unifiedTransferable"), exports);
__exportStar(require("./userLtvInfo"), exports);
__exportStar(require("./userSub"), exports);
__exportStar(require("./userSubRelation"), exports);
__exportStar(require("./userTotalAmount"), exports);
__exportStar(require("./withdrawStatus"), exports);
__exportStar(require("./withdrawalRecord"), exports);
const querystring = require("querystring");
const crypto = require("crypto");
const url_1 = require("url");
const accountBalance_1 = require("./accountBalance");
const accountDetail_1 = require("./accountDetail");
const accountDetailKey_1 = require("./accountDetailKey");
const accountRateLimit_1 = require("./accountRateLimit");
const agencyCommission_1 = require("./agencyCommission");
const agencyCommissionHistory_1 = require("./agencyCommissionHistory");
const agencyTransaction_1 = require("./agencyTransaction");
const agencyTransactionHistory_1 = require("./agencyTransactionHistory");
const autoRepaySetting_1 = require("./autoRepaySetting");
const batchAmendItem_1 = require("./batchAmendItem");
const batchAmendOrderReq_1 = require("./batchAmendOrderReq");
const batchFuturesOrder_1 = require("./batchFuturesOrder");
const batchOrder_1 = require("./batchOrder");
const borrowCurrencyInfo_1 = require("./borrowCurrencyInfo");
const brokerCommission_1 = require("./brokerCommission");
const brokerCommission1_1 = require("./brokerCommission1");
const brokerTransaction_1 = require("./brokerTransaction");
const brokerTransaction1_1 = require("./brokerTransaction1");
const cancelBatchOrder_1 = require("./cancelBatchOrder");
const cancelOrderResult_1 = require("./cancelOrderResult");
const collateralAdjust_1 = require("./collateralAdjust");
const collateralAdjustRes_1 = require("./collateralAdjustRes");
const collateralAlign_1 = require("./collateralAlign");
const collateralCurrency_1 = require("./collateralCurrency");
const collateralCurrencyInfo_1 = require("./collateralCurrencyInfo");
const collateralCurrencyRes_1 = require("./collateralCurrencyRes");
const collateralCurrentRate_1 = require("./collateralCurrentRate");
const collateralFixRate_1 = require("./collateralFixRate");
const collateralLoanCurrency_1 = require("./collateralLoanCurrency");
const collateralLtv_1 = require("./collateralLtv");
const collateralOrder_1 = require("./collateralOrder");
const collateralRecord_1 = require("./collateralRecord");
const contract_1 = require("./contract");
const contractStat_1 = require("./contractStat");
const convertSmallBalance_1 = require("./convertSmallBalance");
const countdownCancelAllFuturesTask_1 = require("./countdownCancelAllFuturesTask");
const countdownCancelAllOptionsTask_1 = require("./countdownCancelAllOptionsTask");
const countdownCancelAllSpotTask_1 = require("./countdownCancelAllSpotTask");
const createCollateralOrder_1 = require("./createCollateralOrder");
const createMultiCollateralOrder_1 = require("./createMultiCollateralOrder");
const createUniLend_1 = require("./createUniLend");
const createUniLoan_1 = require("./createUniLoan");
const crossMarginAccount_1 = require("./crossMarginAccount");
const crossMarginAccountBook_1 = require("./crossMarginAccountBook");
const crossMarginBalance_1 = require("./crossMarginBalance");
const crossMarginBalance1_1 = require("./crossMarginBalance1");
const crossMarginCurrency_1 = require("./crossMarginCurrency");
const crossMarginLoan_1 = require("./crossMarginLoan");
const crossMarginRepayRequest_1 = require("./crossMarginRepayRequest");
const crossMarginRepayment_1 = require("./crossMarginRepayment");
const crossMarginTransferable_1 = require("./crossMarginTransferable");
const currency_1 = require("./currency");
const currencyChain_1 = require("./currencyChain");
const currencyPair_1 = require("./currencyPair");
const currencyQuota_1 = require("./currencyQuota");
const debitFee_1 = require("./debitFee");
const deliveryCandlestick_1 = require("./deliveryCandlestick");
const deliveryContract_1 = require("./deliveryContract");
const deliverySettlement_1 = require("./deliverySettlement");
const deliveryTicker_1 = require("./deliveryTicker");
const depositAddress_1 = require("./depositAddress");
const depositRecord_1 = require("./depositRecord");
const dualGetOrders_1 = require("./dualGetOrders");
const dualGetPlans_1 = require("./dualGetPlans");
const eth2RateList_1 = require("./eth2RateList");
const eth2Swap_1 = require("./eth2Swap");
const flashSwapCurrencyPair_1 = require("./flashSwapCurrencyPair");
const flashSwapOrder_1 = require("./flashSwapOrder");
const flashSwapOrderPreview_1 = require("./flashSwapOrderPreview");
const flashSwapOrderRequest_1 = require("./flashSwapOrderRequest");
const flashSwapPreviewRequest_1 = require("./flashSwapPreviewRequest");
const fundingAccount_1 = require("./fundingAccount");
const fundingRateRecord_1 = require("./fundingRateRecord");
const futureCancelOrderResult_1 = require("./futureCancelOrderResult");
const futuresAccount_1 = require("./futuresAccount");
const futuresAccountBook_1 = require("./futuresAccountBook");
const futuresAccountHistory_1 = require("./futuresAccountHistory");
const futuresAutoDeleverage_1 = require("./futuresAutoDeleverage");
const futuresBatchAmendOrderRequest_1 = require("./futuresBatchAmendOrderRequest");
const futuresCandlestick_1 = require("./futuresCandlestick");
const futuresFee_1 = require("./futuresFee");
const futuresIndexConstituents_1 = require("./futuresIndexConstituents");
const futuresInitialOrder_1 = require("./futuresInitialOrder");
const futuresLimitRiskTiers_1 = require("./futuresLimitRiskTiers");
const futuresLiqOrder_1 = require("./futuresLiqOrder");
const futuresLiquidate_1 = require("./futuresLiquidate");
const futuresOrder_1 = require("./futuresOrder");
const futuresOrderAmendment_1 = require("./futuresOrderAmendment");
const futuresOrderBook_1 = require("./futuresOrderBook");
const futuresOrderBookItem_1 = require("./futuresOrderBookItem");
const futuresPremiumIndex_1 = require("./futuresPremiumIndex");
const futuresPriceTrigger_1 = require("./futuresPriceTrigger");
const futuresPriceTriggeredOrder_1 = require("./futuresPriceTriggeredOrder");
const futuresTicker_1 = require("./futuresTicker");
const futuresTrade_1 = require("./futuresTrade");
const indexConstituent_1 = require("./indexConstituent");
const inlineObject_1 = require("./inlineObject");
const inlineResponse200_1 = require("./inlineResponse200");
const inlineResponse2001_1 = require("./inlineResponse2001");
const insuranceRecord_1 = require("./insuranceRecord");
const ledgerRecord_1 = require("./ledgerRecord");
const liquidateOrder_1 = require("./liquidateOrder");
const marginAccount_1 = require("./marginAccount");
const marginAccountBook_1 = require("./marginAccountBook");
const marginAccountCurrency_1 = require("./marginAccountCurrency");
const marginLeverageTier_1 = require("./marginLeverageTier");
const marginMarketLeverage_1 = require("./marginMarketLeverage");
const marginTiers_1 = require("./marginTiers");
const marginTransferable_1 = require("./marginTransferable");
const maxUniBorrowable_1 = require("./maxUniBorrowable");
const mockFuturesOrder_1 = require("./mockFuturesOrder");
const mockFuturesPosition_1 = require("./mockFuturesPosition");
const mockMarginResult_1 = require("./mockMarginResult");
const mockOptionsOrder_1 = require("./mockOptionsOrder");
const mockOptionsPosition_1 = require("./mockOptionsPosition");
const mockRiskUnit_1 = require("./mockRiskUnit");
const mockSpotBalance_1 = require("./mockSpotBalance");
const mockSpotOrder_1 = require("./mockSpotOrder");
const multiChainAddressItem_1 = require("./multiChainAddressItem");
const multiCollateralCurrency_1 = require("./multiCollateralCurrency");
const multiCollateralItem_1 = require("./multiCollateralItem");
const multiCollateralOrder_1 = require("./multiCollateralOrder");
const multiCollateralRecord_1 = require("./multiCollateralRecord");
const multiCollateralRecordCurrency_1 = require("./multiCollateralRecordCurrency");
const multiLoanItem_1 = require("./multiLoanItem");
const multiLoanRepayItem_1 = require("./multiLoanRepayItem");
const multiRepayRecord_1 = require("./multiRepayRecord");
const multiRepayResp_1 = require("./multiRepayResp");
const myFuturesTrade_1 = require("./myFuturesTrade");
const myFuturesTradeTimeRange_1 = require("./myFuturesTradeTimeRange");
const openOrders_1 = require("./openOrders");
const optionsAccount_1 = require("./optionsAccount");
const optionsAccountBook_1 = require("./optionsAccountBook");
const optionsCandlestick_1 = require("./optionsCandlestick");
const optionsContract_1 = require("./optionsContract");
const optionsMMP_1 = require("./optionsMMP");
const optionsMMPReset_1 = require("./optionsMMPReset");
const optionsMySettlements_1 = require("./optionsMySettlements");
const optionsMyTrade_1 = require("./optionsMyTrade");
const optionsOrder_1 = require("./optionsOrder");
const optionsPosition_1 = require("./optionsPosition");
const optionsPositionClose_1 = require("./optionsPositionClose");
const optionsPositionCloseOrder_1 = require("./optionsPositionCloseOrder");
const optionsSettlement_1 = require("./optionsSettlement");
const optionsTicker_1 = require("./optionsTicker");
const optionsUnderlying_1 = require("./optionsUnderlying");
const optionsUnderlyingTicker_1 = require("./optionsUnderlyingTicker");
const order_1 = require("./order");
const orderBook_1 = require("./orderBook");
const orderCancel_1 = require("./orderCancel");
const orderPatch_1 = require("./orderPatch");
const orderResp_1 = require("./orderResp");
const partnerCommissionHistory_1 = require("./partnerCommissionHistory");
const partnerSub_1 = require("./partnerSub");
const partnerSubList_1 = require("./partnerSubList");
const partnerTransactionHistory_1 = require("./partnerTransactionHistory");
const patchUniLend_1 = require("./patchUniLend");
const placeDualInvestmentOrder_1 = require("./placeDualInvestmentOrder");
const position_1 = require("./position");
const positionClose_1 = require("./positionClose");
const positionCloseOrder_1 = require("./positionCloseOrder");
const profitLossRange_1 = require("./profitLossRange");
const rebateUserInfo_1 = require("./rebateUserInfo");
const repayCurrencyRes_1 = require("./repayCurrencyRes");
const repayLoan_1 = require("./repayLoan");
const repayMultiLoan_1 = require("./repayMultiLoan");
const repayRecord_1 = require("./repayRecord");
const repayRecordCurrency_1 = require("./repayRecordCurrency");
const repayRecordLeftInterest_1 = require("./repayRecordLeftInterest");
const repayRecordRepaidCurrency_1 = require("./repayRecordRepaidCurrency");
const repayRecordTotalInterest_1 = require("./repayRecordTotalInterest");
const repayResp_1 = require("./repayResp");
const riskUnits_1 = require("./riskUnits");
const savedAddress_1 = require("./savedAddress");
const smallBalance_1 = require("./smallBalance");
const smallBalanceHistory_1 = require("./smallBalanceHistory");
const spotAccount_1 = require("./spotAccount");
const spotAccountBook_1 = require("./spotAccountBook");
const spotCurrencyChain_1 = require("./spotCurrencyChain");
const spotFee_1 = require("./spotFee");
const spotInsuranceHistory_1 = require("./spotInsuranceHistory");
const spotPricePutOrder_1 = require("./spotPricePutOrder");
const spotPriceTrigger_1 = require("./spotPriceTrigger");
const spotPriceTriggeredOrder_1 = require("./spotPriceTriggeredOrder");
const stpGroup_1 = require("./stpGroup");
const stpGroupUser_1 = require("./stpGroupUser");
const structuredBuy_1 = require("./structuredBuy");
const structuredGetProjectList_1 = require("./structuredGetProjectList");
const structuredOrderList_1 = require("./structuredOrderList");
const subAccount_1 = require("./subAccount");
const subAccountBalance_1 = require("./subAccountBalance");
const subAccountCrossMarginBalance_1 = require("./subAccountCrossMarginBalance");
const subAccountFuturesBalance_1 = require("./subAccountFuturesBalance");
const subAccountKey_1 = require("./subAccountKey");
const subAccountKeyPerms_1 = require("./subAccountKeyPerms");
const subAccountMarginBalance_1 = require("./subAccountMarginBalance");
const subAccountToSubAccount_1 = require("./subAccountToSubAccount");
const subAccountTransfer_1 = require("./subAccountTransfer");
const subCrossMarginAccount_1 = require("./subCrossMarginAccount");
const subUserMode_1 = require("./subUserMode");
const systemTime_1 = require("./systemTime");
const ticker_1 = require("./ticker");
const totalBalance_1 = require("./totalBalance");
const trade_1 = require("./trade");
const tradeFee_1 = require("./tradeFee");
const transactionID_1 = require("./transactionID");
const transfer_1 = require("./transfer");
const transferOrderStatus_1 = require("./transferOrderStatus");
const transferablesResult_1 = require("./transferablesResult");
const triggerOrderResponse_1 = require("./triggerOrderResponse");
const triggerTime_1 = require("./triggerTime");
const uidPushOrder_1 = require("./uidPushOrder");
const uidPushWithdrawal_1 = require("./uidPushWithdrawal");
const uidPushWithdrawalResp_1 = require("./uidPushWithdrawalResp");
const uniCurrency_1 = require("./uniCurrency");
const uniCurrencyInterest_1 = require("./uniCurrencyInterest");
const uniCurrencyPair_1 = require("./uniCurrencyPair");
const uniInterestMode_1 = require("./uniInterestMode");
const uniInterestRecord_1 = require("./uniInterestRecord");
const uniLend_1 = require("./uniLend");
const uniLendInterest_1 = require("./uniLendInterest");
const uniLendRecord_1 = require("./uniLendRecord");
const uniLoan_1 = require("./uniLoan");
const uniLoanInterestRecord_1 = require("./uniLoanInterestRecord");
const uniLoanRecord_1 = require("./uniLoanRecord");
const unifiedAccount_1 = require("./unifiedAccount");
const unifiedBalance_1 = require("./unifiedBalance");
const unifiedBorrowable_1 = require("./unifiedBorrowable");
const unifiedBorrowable1_1 = require("./unifiedBorrowable1");
const unifiedCurrency_1 = require("./unifiedCurrency");
const unifiedDiscount_1 = require("./unifiedDiscount");
const unifiedDiscountTiers_1 = require("./unifiedDiscountTiers");
const unifiedHistoryLoanRate_1 = require("./unifiedHistoryLoanRate");
const unifiedHistoryLoanRateRates_1 = require("./unifiedHistoryLoanRateRates");
const unifiedLeverageConfig_1 = require("./unifiedLeverageConfig");
const unifiedLeverageSetting_1 = require("./unifiedLeverageSetting");
const unifiedLoan_1 = require("./unifiedLoan");
const unifiedLoanRecord_1 = require("./unifiedLoanRecord");
const unifiedLoanResult_1 = require("./unifiedLoanResult");
const unifiedMarginTiers_1 = require("./unifiedMarginTiers");
const unifiedModeSet_1 = require("./unifiedModeSet");
const unifiedPortfolioInput_1 = require("./unifiedPortfolioInput");
const unifiedPortfolioOutput_1 = require("./unifiedPortfolioOutput");
const unifiedRiskUnits_1 = require("./unifiedRiskUnits");
const unifiedSettings_1 = require("./unifiedSettings");
const unifiedTransferable_1 = require("./unifiedTransferable");
const userLtvInfo_1 = require("./userLtvInfo");
const userSub_1 = require("./userSub");
const userSubRelation_1 = require("./userSubRelation");
const userTotalAmount_1 = require("./userTotalAmount");
const withdrawStatus_1 = require("./withdrawStatus");
const withdrawalRecord_1 = require("./withdrawalRecord");
let primitives = ['string', 'boolean', 'double', 'integer', 'long', 'float', 'number', 'any', 'bigint'];
let enumsMap = {
    'AccountBalance.Currency': accountBalance_1.AccountBalance.Currency,
    'AutoRepaySetting.Status': autoRepaySetting_1.AutoRepaySetting.Status,
    'BatchFuturesOrder.FinishAs': batchFuturesOrder_1.BatchFuturesOrder.FinishAs,
    'BatchFuturesOrder.Status': batchFuturesOrder_1.BatchFuturesOrder.Status,
    'BatchFuturesOrder.Tif': batchFuturesOrder_1.BatchFuturesOrder.Tif,
    'BatchFuturesOrder.AutoSize': batchFuturesOrder_1.BatchFuturesOrder.AutoSize,
    'BatchFuturesOrder.StpAct': batchFuturesOrder_1.BatchFuturesOrder.StpAct,
    'BatchOrder.Status': batchOrder_1.BatchOrder.Status,
    'BatchOrder.Type': batchOrder_1.BatchOrder.Type,
    'BatchOrder.Account': batchOrder_1.BatchOrder.Account,
    'BatchOrder.Side': batchOrder_1.BatchOrder.Side,
    'BatchOrder.TimeInForce': batchOrder_1.BatchOrder.TimeInForce,
    'BatchOrder.StpAct': batchOrder_1.BatchOrder.StpAct,
    'BatchOrder.FinishAs': batchOrder_1.BatchOrder.FinishAs,
    'Contract.Type': contract_1.Contract.Type,
    'Contract.MarkType': contract_1.Contract.MarkType,
    'CreateUniLend.Type': createUniLend_1.CreateUniLend.Type,
    'CreateUniLoan.Type': createUniLoan_1.CreateUniLoan.Type,
    'CrossMarginLoan.Status': crossMarginLoan_1.CrossMarginLoan.Status,
    'CurrencyPair.TradeStatus': currencyPair_1.CurrencyPair.TradeStatus,
    'DeliveryContract.Cycle': deliveryContract_1.DeliveryContract.Cycle,
    'DeliveryContract.Type': deliveryContract_1.DeliveryContract.Type,
    'DeliveryContract.MarkType': deliveryContract_1.DeliveryContract.MarkType,
    'FuturesAccountBook.Type': futuresAccountBook_1.FuturesAccountBook.Type,
    'FuturesInitialOrder.Tif': futuresInitialOrder_1.FuturesInitialOrder.Tif,
    'FuturesOrder.FinishAs': futuresOrder_1.FuturesOrder.FinishAs,
    'FuturesOrder.Status': futuresOrder_1.FuturesOrder.Status,
    'FuturesOrder.Tif': futuresOrder_1.FuturesOrder.Tif,
    'FuturesOrder.AutoSize': futuresOrder_1.FuturesOrder.AutoSize,
    'FuturesOrder.StpAct': futuresOrder_1.FuturesOrder.StpAct,
    'FuturesPriceTrigger.StrategyType': futuresPriceTrigger_1.FuturesPriceTrigger.StrategyType,
    'FuturesPriceTrigger.PriceType': futuresPriceTrigger_1.FuturesPriceTrigger.PriceType,
    'FuturesPriceTrigger.Rule': futuresPriceTrigger_1.FuturesPriceTrigger.Rule,
    'FuturesPriceTriggeredOrder.Status': futuresPriceTriggeredOrder_1.FuturesPriceTriggeredOrder.Status,
    'FuturesPriceTriggeredOrder.FinishAs': futuresPriceTriggeredOrder_1.FuturesPriceTriggeredOrder.FinishAs,
    'MyFuturesTrade.Role': myFuturesTrade_1.MyFuturesTrade.Role,
    'MyFuturesTradeTimeRange.Role': myFuturesTradeTimeRange_1.MyFuturesTradeTimeRange.Role,
    'OptionsAccount.MarginMode': optionsAccount_1.OptionsAccount.MarginMode,
    'OptionsMyTrade.Role': optionsMyTrade_1.OptionsMyTrade.Role,
    'OptionsOrder.FinishAs': optionsOrder_1.OptionsOrder.FinishAs,
    'OptionsOrder.Status': optionsOrder_1.OptionsOrder.Status,
    'OptionsOrder.Tif': optionsOrder_1.OptionsOrder.Tif,
    'OptionsPositionClose.Side': optionsPositionClose_1.OptionsPositionClose.Side,
    'Order.Status': order_1.Order.Status,
    'Order.Type': order_1.Order.Type,
    'Order.Side': order_1.Order.Side,
    'Order.TimeInForce': order_1.Order.TimeInForce,
    'Order.StpAct': order_1.Order.StpAct,
    'Order.FinishAs': order_1.Order.FinishAs,
    'OrderCancel.Status': orderCancel_1.OrderCancel.Status,
    'OrderCancel.Type': orderCancel_1.OrderCancel.Type,
    'OrderCancel.Side': orderCancel_1.OrderCancel.Side,
    'OrderCancel.TimeInForce': orderCancel_1.OrderCancel.TimeInForce,
    'OrderCancel.StpAct': orderCancel_1.OrderCancel.StpAct,
    'OrderCancel.FinishAs': orderCancel_1.OrderCancel.FinishAs,
    'Position.Mode': position_1.Position.Mode,
    'PositionClose.Side': positionClose_1.PositionClose.Side,
    'SpotPricePutOrder.Type': spotPricePutOrder_1.SpotPricePutOrder.Type,
    'SpotPricePutOrder.Side': spotPricePutOrder_1.SpotPricePutOrder.Side,
    'SpotPricePutOrder.Account': spotPricePutOrder_1.SpotPricePutOrder.Account,
    'SpotPricePutOrder.TimeInForce': spotPricePutOrder_1.SpotPricePutOrder.TimeInForce,
    'SpotPriceTrigger.Rule': spotPriceTrigger_1.SpotPriceTrigger.Rule,
    'Trade.Side': trade_1.Trade.Side,
    'Trade.Role': trade_1.Trade.Role,
    'Transfer.From': transfer_1.Transfer.From,
    'Transfer.To': transfer_1.Transfer.To,
    'UnifiedLoan.Type': unifiedLoan_1.UnifiedLoan.Type,
};
let typeMap = {
    AccountBalance: accountBalance_1.AccountBalance,
    AccountDetail: accountDetail_1.AccountDetail,
    AccountDetailKey: accountDetailKey_1.AccountDetailKey,
    AccountRateLimit: accountRateLimit_1.AccountRateLimit,
    AgencyCommission: agencyCommission_1.AgencyCommission,
    AgencyCommissionHistory: agencyCommissionHistory_1.AgencyCommissionHistory,
    AgencyTransaction: agencyTransaction_1.AgencyTransaction,
    AgencyTransactionHistory: agencyTransactionHistory_1.AgencyTransactionHistory,
    AutoRepaySetting: autoRepaySetting_1.AutoRepaySetting,
    BatchAmendItem: batchAmendItem_1.BatchAmendItem,
    BatchAmendOrderReq: batchAmendOrderReq_1.BatchAmendOrderReq,
    BatchFuturesOrder: batchFuturesOrder_1.BatchFuturesOrder,
    BatchOrder: batchOrder_1.BatchOrder,
    BorrowCurrencyInfo: borrowCurrencyInfo_1.BorrowCurrencyInfo,
    BrokerCommission: brokerCommission_1.BrokerCommission,
    BrokerCommission1: brokerCommission1_1.BrokerCommission1,
    BrokerTransaction: brokerTransaction_1.BrokerTransaction,
    BrokerTransaction1: brokerTransaction1_1.BrokerTransaction1,
    CancelBatchOrder: cancelBatchOrder_1.CancelBatchOrder,
    CancelOrderResult: cancelOrderResult_1.CancelOrderResult,
    CollateralAdjust: collateralAdjust_1.CollateralAdjust,
    CollateralAdjustRes: collateralAdjustRes_1.CollateralAdjustRes,
    CollateralAlign: collateralAlign_1.CollateralAlign,
    CollateralCurrency: collateralCurrency_1.CollateralCurrency,
    CollateralCurrencyInfo: collateralCurrencyInfo_1.CollateralCurrencyInfo,
    CollateralCurrencyRes: collateralCurrencyRes_1.CollateralCurrencyRes,
    CollateralCurrentRate: collateralCurrentRate_1.CollateralCurrentRate,
    CollateralFixRate: collateralFixRate_1.CollateralFixRate,
    CollateralLoanCurrency: collateralLoanCurrency_1.CollateralLoanCurrency,
    CollateralLtv: collateralLtv_1.CollateralLtv,
    CollateralOrder: collateralOrder_1.CollateralOrder,
    CollateralRecord: collateralRecord_1.CollateralRecord,
    Contract: contract_1.Contract,
    ContractStat: contractStat_1.ContractStat,
    ConvertSmallBalance: convertSmallBalance_1.ConvertSmallBalance,
    CountdownCancelAllFuturesTask: countdownCancelAllFuturesTask_1.CountdownCancelAllFuturesTask,
    CountdownCancelAllOptionsTask: countdownCancelAllOptionsTask_1.CountdownCancelAllOptionsTask,
    CountdownCancelAllSpotTask: countdownCancelAllSpotTask_1.CountdownCancelAllSpotTask,
    CreateCollateralOrder: createCollateralOrder_1.CreateCollateralOrder,
    CreateMultiCollateralOrder: createMultiCollateralOrder_1.CreateMultiCollateralOrder,
    CreateUniLend: createUniLend_1.CreateUniLend,
    CreateUniLoan: createUniLoan_1.CreateUniLoan,
    CrossMarginAccount: crossMarginAccount_1.CrossMarginAccount,
    CrossMarginAccountBook: crossMarginAccountBook_1.CrossMarginAccountBook,
    CrossMarginBalance: crossMarginBalance_1.CrossMarginBalance,
    CrossMarginBalance1: crossMarginBalance1_1.CrossMarginBalance1,
    CrossMarginCurrency: crossMarginCurrency_1.CrossMarginCurrency,
    CrossMarginLoan: crossMarginLoan_1.CrossMarginLoan,
    CrossMarginRepayRequest: crossMarginRepayRequest_1.CrossMarginRepayRequest,
    CrossMarginRepayment: crossMarginRepayment_1.CrossMarginRepayment,
    CrossMarginTransferable: crossMarginTransferable_1.CrossMarginTransferable,
    Currency: currency_1.Currency,
    CurrencyChain: currencyChain_1.CurrencyChain,
    CurrencyPair: currencyPair_1.CurrencyPair,
    CurrencyQuota: currencyQuota_1.CurrencyQuota,
    DebitFee: debitFee_1.DebitFee,
    DeliveryCandlestick: deliveryCandlestick_1.DeliveryCandlestick,
    DeliveryContract: deliveryContract_1.DeliveryContract,
    DeliverySettlement: deliverySettlement_1.DeliverySettlement,
    DeliveryTicker: deliveryTicker_1.DeliveryTicker,
    DepositAddress: depositAddress_1.DepositAddress,
    DepositRecord: depositRecord_1.DepositRecord,
    DualGetOrders: dualGetOrders_1.DualGetOrders,
    DualGetPlans: dualGetPlans_1.DualGetPlans,
    Eth2RateList: eth2RateList_1.Eth2RateList,
    Eth2Swap: eth2Swap_1.Eth2Swap,
    FlashSwapCurrencyPair: flashSwapCurrencyPair_1.FlashSwapCurrencyPair,
    FlashSwapOrder: flashSwapOrder_1.FlashSwapOrder,
    FlashSwapOrderPreview: flashSwapOrderPreview_1.FlashSwapOrderPreview,
    FlashSwapOrderRequest: flashSwapOrderRequest_1.FlashSwapOrderRequest,
    FlashSwapPreviewRequest: flashSwapPreviewRequest_1.FlashSwapPreviewRequest,
    FundingAccount: fundingAccount_1.FundingAccount,
    FundingRateRecord: fundingRateRecord_1.FundingRateRecord,
    FutureCancelOrderResult: futureCancelOrderResult_1.FutureCancelOrderResult,
    FuturesAccount: futuresAccount_1.FuturesAccount,
    FuturesAccountBook: futuresAccountBook_1.FuturesAccountBook,
    FuturesAccountHistory: futuresAccountHistory_1.FuturesAccountHistory,
    FuturesAutoDeleverage: futuresAutoDeleverage_1.FuturesAutoDeleverage,
    FuturesBatchAmendOrderRequest: futuresBatchAmendOrderRequest_1.FuturesBatchAmendOrderRequest,
    FuturesCandlestick: futuresCandlestick_1.FuturesCandlestick,
    FuturesFee: futuresFee_1.FuturesFee,
    FuturesIndexConstituents: futuresIndexConstituents_1.FuturesIndexConstituents,
    FuturesInitialOrder: futuresInitialOrder_1.FuturesInitialOrder,
    FuturesLimitRiskTiers: futuresLimitRiskTiers_1.FuturesLimitRiskTiers,
    FuturesLiqOrder: futuresLiqOrder_1.FuturesLiqOrder,
    FuturesLiquidate: futuresLiquidate_1.FuturesLiquidate,
    FuturesOrder: futuresOrder_1.FuturesOrder,
    FuturesOrderAmendment: futuresOrderAmendment_1.FuturesOrderAmendment,
    FuturesOrderBook: futuresOrderBook_1.FuturesOrderBook,
    FuturesOrderBookItem: futuresOrderBookItem_1.FuturesOrderBookItem,
    FuturesPremiumIndex: futuresPremiumIndex_1.FuturesPremiumIndex,
    FuturesPriceTrigger: futuresPriceTrigger_1.FuturesPriceTrigger,
    FuturesPriceTriggeredOrder: futuresPriceTriggeredOrder_1.FuturesPriceTriggeredOrder,
    FuturesTicker: futuresTicker_1.FuturesTicker,
    FuturesTrade: futuresTrade_1.FuturesTrade,
    IndexConstituent: indexConstituent_1.IndexConstituent,
    InlineObject: inlineObject_1.InlineObject,
    InlineResponse200: inlineResponse200_1.InlineResponse200,
    InlineResponse2001: inlineResponse2001_1.InlineResponse2001,
    InsuranceRecord: insuranceRecord_1.InsuranceRecord,
    LedgerRecord: ledgerRecord_1.LedgerRecord,
    LiquidateOrder: liquidateOrder_1.LiquidateOrder,
    MarginAccount: marginAccount_1.MarginAccount,
    MarginAccountBook: marginAccountBook_1.MarginAccountBook,
    MarginAccountCurrency: marginAccountCurrency_1.MarginAccountCurrency,
    MarginLeverageTier: marginLeverageTier_1.MarginLeverageTier,
    MarginMarketLeverage: marginMarketLeverage_1.MarginMarketLeverage,
    MarginTiers: marginTiers_1.MarginTiers,
    MarginTransferable: marginTransferable_1.MarginTransferable,
    MaxUniBorrowable: maxUniBorrowable_1.MaxUniBorrowable,
    MockFuturesOrder: mockFuturesOrder_1.MockFuturesOrder,
    MockFuturesPosition: mockFuturesPosition_1.MockFuturesPosition,
    MockMarginResult: mockMarginResult_1.MockMarginResult,
    MockOptionsOrder: mockOptionsOrder_1.MockOptionsOrder,
    MockOptionsPosition: mockOptionsPosition_1.MockOptionsPosition,
    MockRiskUnit: mockRiskUnit_1.MockRiskUnit,
    MockSpotBalance: mockSpotBalance_1.MockSpotBalance,
    MockSpotOrder: mockSpotOrder_1.MockSpotOrder,
    MultiChainAddressItem: multiChainAddressItem_1.MultiChainAddressItem,
    MultiCollateralCurrency: multiCollateralCurrency_1.MultiCollateralCurrency,
    MultiCollateralItem: multiCollateralItem_1.MultiCollateralItem,
    MultiCollateralOrder: multiCollateralOrder_1.MultiCollateralOrder,
    MultiCollateralRecord: multiCollateralRecord_1.MultiCollateralRecord,
    MultiCollateralRecordCurrency: multiCollateralRecordCurrency_1.MultiCollateralRecordCurrency,
    MultiLoanItem: multiLoanItem_1.MultiLoanItem,
    MultiLoanRepayItem: multiLoanRepayItem_1.MultiLoanRepayItem,
    MultiRepayRecord: multiRepayRecord_1.MultiRepayRecord,
    MultiRepayResp: multiRepayResp_1.MultiRepayResp,
    MyFuturesTrade: myFuturesTrade_1.MyFuturesTrade,
    MyFuturesTradeTimeRange: myFuturesTradeTimeRange_1.MyFuturesTradeTimeRange,
    OpenOrders: openOrders_1.OpenOrders,
    OptionsAccount: optionsAccount_1.OptionsAccount,
    OptionsAccountBook: optionsAccountBook_1.OptionsAccountBook,
    OptionsCandlestick: optionsCandlestick_1.OptionsCandlestick,
    OptionsContract: optionsContract_1.OptionsContract,
    OptionsMMP: optionsMMP_1.OptionsMMP,
    OptionsMMPReset: optionsMMPReset_1.OptionsMMPReset,
    OptionsMySettlements: optionsMySettlements_1.OptionsMySettlements,
    OptionsMyTrade: optionsMyTrade_1.OptionsMyTrade,
    OptionsOrder: optionsOrder_1.OptionsOrder,
    OptionsPosition: optionsPosition_1.OptionsPosition,
    OptionsPositionClose: optionsPositionClose_1.OptionsPositionClose,
    OptionsPositionCloseOrder: optionsPositionCloseOrder_1.OptionsPositionCloseOrder,
    OptionsSettlement: optionsSettlement_1.OptionsSettlement,
    OptionsTicker: optionsTicker_1.OptionsTicker,
    OptionsUnderlying: optionsUnderlying_1.OptionsUnderlying,
    OptionsUnderlyingTicker: optionsUnderlyingTicker_1.OptionsUnderlyingTicker,
    Order: order_1.Order,
    OrderBook: orderBook_1.OrderBook,
    OrderCancel: orderCancel_1.OrderCancel,
    OrderPatch: orderPatch_1.OrderPatch,
    OrderResp: orderResp_1.OrderResp,
    PartnerCommissionHistory: partnerCommissionHistory_1.PartnerCommissionHistory,
    PartnerSub: partnerSub_1.PartnerSub,
    PartnerSubList: partnerSubList_1.PartnerSubList,
    PartnerTransactionHistory: partnerTransactionHistory_1.PartnerTransactionHistory,
    PatchUniLend: patchUniLend_1.PatchUniLend,
    PlaceDualInvestmentOrder: placeDualInvestmentOrder_1.PlaceDualInvestmentOrder,
    Position: position_1.Position,
    PositionClose: positionClose_1.PositionClose,
    PositionCloseOrder: positionCloseOrder_1.PositionCloseOrder,
    ProfitLossRange: profitLossRange_1.ProfitLossRange,
    RebateUserInfo: rebateUserInfo_1.RebateUserInfo,
    RepayCurrencyRes: repayCurrencyRes_1.RepayCurrencyRes,
    RepayLoan: repayLoan_1.RepayLoan,
    RepayMultiLoan: repayMultiLoan_1.RepayMultiLoan,
    RepayRecord: repayRecord_1.RepayRecord,
    RepayRecordCurrency: repayRecordCurrency_1.RepayRecordCurrency,
    RepayRecordLeftInterest: repayRecordLeftInterest_1.RepayRecordLeftInterest,
    RepayRecordRepaidCurrency: repayRecordRepaidCurrency_1.RepayRecordRepaidCurrency,
    RepayRecordTotalInterest: repayRecordTotalInterest_1.RepayRecordTotalInterest,
    RepayResp: repayResp_1.RepayResp,
    RiskUnits: riskUnits_1.RiskUnits,
    SavedAddress: savedAddress_1.SavedAddress,
    SmallBalance: smallBalance_1.SmallBalance,
    SmallBalanceHistory: smallBalanceHistory_1.SmallBalanceHistory,
    SpotAccount: spotAccount_1.SpotAccount,
    SpotAccountBook: spotAccountBook_1.SpotAccountBook,
    SpotCurrencyChain: spotCurrencyChain_1.SpotCurrencyChain,
    SpotFee: spotFee_1.SpotFee,
    SpotInsuranceHistory: spotInsuranceHistory_1.SpotInsuranceHistory,
    SpotPricePutOrder: spotPricePutOrder_1.SpotPricePutOrder,
    SpotPriceTrigger: spotPriceTrigger_1.SpotPriceTrigger,
    SpotPriceTriggeredOrder: spotPriceTriggeredOrder_1.SpotPriceTriggeredOrder,
    StpGroup: stpGroup_1.StpGroup,
    StpGroupUser: stpGroupUser_1.StpGroupUser,
    StructuredBuy: structuredBuy_1.StructuredBuy,
    StructuredGetProjectList: structuredGetProjectList_1.StructuredGetProjectList,
    StructuredOrderList: structuredOrderList_1.StructuredOrderList,
    SubAccount: subAccount_1.SubAccount,
    SubAccountBalance: subAccountBalance_1.SubAccountBalance,
    SubAccountCrossMarginBalance: subAccountCrossMarginBalance_1.SubAccountCrossMarginBalance,
    SubAccountFuturesBalance: subAccountFuturesBalance_1.SubAccountFuturesBalance,
    SubAccountKey: subAccountKey_1.SubAccountKey,
    SubAccountKeyPerms: subAccountKeyPerms_1.SubAccountKeyPerms,
    SubAccountMarginBalance: subAccountMarginBalance_1.SubAccountMarginBalance,
    SubAccountToSubAccount: subAccountToSubAccount_1.SubAccountToSubAccount,
    SubAccountTransfer: subAccountTransfer_1.SubAccountTransfer,
    SubCrossMarginAccount: subCrossMarginAccount_1.SubCrossMarginAccount,
    SubUserMode: subUserMode_1.SubUserMode,
    SystemTime: systemTime_1.SystemTime,
    Ticker: ticker_1.Ticker,
    TotalBalance: totalBalance_1.TotalBalance,
    Trade: trade_1.Trade,
    TradeFee: tradeFee_1.TradeFee,
    TransactionID: transactionID_1.TransactionID,
    Transfer: transfer_1.Transfer,
    TransferOrderStatus: transferOrderStatus_1.TransferOrderStatus,
    TransferablesResult: transferablesResult_1.TransferablesResult,
    TriggerOrderResponse: triggerOrderResponse_1.TriggerOrderResponse,
    TriggerTime: triggerTime_1.TriggerTime,
    UidPushOrder: uidPushOrder_1.UidPushOrder,
    UidPushWithdrawal: uidPushWithdrawal_1.UidPushWithdrawal,
    UidPushWithdrawalResp: uidPushWithdrawalResp_1.UidPushWithdrawalResp,
    UniCurrency: uniCurrency_1.UniCurrency,
    UniCurrencyInterest: uniCurrencyInterest_1.UniCurrencyInterest,
    UniCurrencyPair: uniCurrencyPair_1.UniCurrencyPair,
    UniInterestMode: uniInterestMode_1.UniInterestMode,
    UniInterestRecord: uniInterestRecord_1.UniInterestRecord,
    UniLend: uniLend_1.UniLend,
    UniLendInterest: uniLendInterest_1.UniLendInterest,
    UniLendRecord: uniLendRecord_1.UniLendRecord,
    UniLoan: uniLoan_1.UniLoan,
    UniLoanInterestRecord: uniLoanInterestRecord_1.UniLoanInterestRecord,
    UniLoanRecord: uniLoanRecord_1.UniLoanRecord,
    UnifiedAccount: unifiedAccount_1.UnifiedAccount,
    UnifiedBalance: unifiedBalance_1.UnifiedBalance,
    UnifiedBorrowable: unifiedBorrowable_1.UnifiedBorrowable,
    UnifiedBorrowable1: unifiedBorrowable1_1.UnifiedBorrowable1,
    UnifiedCurrency: unifiedCurrency_1.UnifiedCurrency,
    UnifiedDiscount: unifiedDiscount_1.UnifiedDiscount,
    UnifiedDiscountTiers: unifiedDiscountTiers_1.UnifiedDiscountTiers,
    UnifiedHistoryLoanRate: unifiedHistoryLoanRate_1.UnifiedHistoryLoanRate,
    UnifiedHistoryLoanRateRates: unifiedHistoryLoanRateRates_1.UnifiedHistoryLoanRateRates,
    UnifiedLeverageConfig: unifiedLeverageConfig_1.UnifiedLeverageConfig,
    UnifiedLeverageSetting: unifiedLeverageSetting_1.UnifiedLeverageSetting,
    UnifiedLoan: unifiedLoan_1.UnifiedLoan,
    UnifiedLoanRecord: unifiedLoanRecord_1.UnifiedLoanRecord,
    UnifiedLoanResult: unifiedLoanResult_1.UnifiedLoanResult,
    UnifiedMarginTiers: unifiedMarginTiers_1.UnifiedMarginTiers,
    UnifiedModeSet: unifiedModeSet_1.UnifiedModeSet,
    UnifiedPortfolioInput: unifiedPortfolioInput_1.UnifiedPortfolioInput,
    UnifiedPortfolioOutput: unifiedPortfolioOutput_1.UnifiedPortfolioOutput,
    UnifiedRiskUnits: unifiedRiskUnits_1.UnifiedRiskUnits,
    UnifiedSettings: unifiedSettings_1.UnifiedSettings,
    UnifiedTransferable: unifiedTransferable_1.UnifiedTransferable,
    UserLtvInfo: userLtvInfo_1.UserLtvInfo,
    UserSub: userSub_1.UserSub,
    UserSubRelation: userSubRelation_1.UserSubRelation,
    UserTotalAmount: userTotalAmount_1.UserTotalAmount,
    WithdrawStatus: withdrawStatus_1.WithdrawStatus,
    WithdrawalRecord: withdrawalRecord_1.WithdrawalRecord,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === 'Date') {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType;
            }
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType;
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType;
                    }
                    else {
                        return expectedType;
                    }
                }
                else {
                    return expectedType;
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            if (type.toLowerCase() === 'bigint') {
                return data.toString();
            }
            return data;
        }
        else if (type.lastIndexOf('Array<', 0) === 0) {
            let subType = type.replace('Array<', '');
            subType = subType.substring(0, subType.length - 1);
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === 'Date') {
            return data.toISOString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            type = this.findCorrectType(data, type);
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            if (type.toLowerCase() === 'bigint') {
                return BigInt(data);
            }
            return data;
        }
        else if (type.lastIndexOf('Array<', 0) === 0) {
            let subType = type.replace('Array<', '');
            subType = subType.substring(0, subType.length - 1);
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === 'Date') {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
class HttpBasicAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(config) {
        config.auth = {
            username: this.username,
            password: this.password,
        };
        return config;
    }
}
exports.HttpBasicAuth = HttpBasicAuth;
class HttpBearerAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(config) {
        if (config && config.headers) {
            const accessToken = typeof this.accessToken === 'function' ? this.accessToken() : this.accessToken;
            config.headers['Authorization'] = 'Bearer ' + accessToken;
        }
        return config;
    }
}
exports.HttpBearerAuth = HttpBearerAuth;
class ApiKeyAuth {
    constructor(location, paramName) {
        this.location = location;
        this.paramName = paramName;
        this.apiKey = '';
    }
    applyToRequest(config) {
        if (this.location == 'query') {
            config.params[this.paramName] = this.apiKey;
        }
        else if (this.location == 'header' && config && config.headers) {
            config.headers[this.paramName] = this.apiKey;
        }
        else if (this.location == 'cookie' && config && config.headers) {
            if (config.headers['Cookie']) {
                config.headers['Cookie'] += '; ' + this.paramName + '=' + encodeURIComponent(this.apiKey);
            }
            else {
                config.headers['Cookie'] = this.paramName + '=' + encodeURIComponent(this.apiKey);
            }
        }
        return config;
    }
}
exports.ApiKeyAuth = ApiKeyAuth;
class OAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(config) {
        if (config && config.headers) {
            config.headers['Authorization'] = 'Bearer ' + this.accessToken;
        }
        return config;
    }
}
exports.OAuth = OAuth;
class GateApiV4Auth {
    constructor() {
        this.key = '';
        this.secret = '';
    }
    applyToRequest(config) {
        config.paramsSerializer = function (params) {
            return querystring.stringify(params);
        };
        const timestamp = (new Date().getTime() / 1000).toString();
        const resourcePath = new url_1.URL(config.url).pathname;
        const queryString = unescape(querystring.stringify(config.params));
        let bodyParam = '';
        if (config.data) {
            if (typeof config.data == 'string') {
                bodyParam = config.data;
            }
            else {
                bodyParam = JSON.stringify(config.data);
            }
        }
        const hashedPayload = crypto.createHash('sha512').update(bodyParam).digest('hex');
        const signatureString = [config.method, resourcePath, queryString, hashedPayload, timestamp].join('\n');
        const signature = crypto.createHmac('sha512', this.secret).update(signatureString).digest('hex');
        Object.assign(config.headers, { KEY: this.key, Timestamp: timestamp, SIGN: signature });
        return config;
    }
}
exports.GateApiV4Auth = GateApiV4Auth;
