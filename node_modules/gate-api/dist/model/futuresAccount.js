"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FuturesAccount = void 0;
class FuturesAccount {
    static getAttributeTypeMap() {
        return FuturesAccount.attributeTypeMap;
    }
}
exports.FuturesAccount = FuturesAccount;
FuturesAccount.discriminator = undefined;
FuturesAccount.attributeTypeMap = [
    {
        name: 'total',
        baseName: 'total',
        type: 'string',
    },
    {
        name: 'unrealisedPnl',
        baseName: 'unrealised_pnl',
        type: 'string',
    },
    {
        name: 'positionMargin',
        baseName: 'position_margin',
        type: 'string',
    },
    {
        name: 'orderMargin',
        baseName: 'order_margin',
        type: 'string',
    },
    {
        name: 'available',
        baseName: 'available',
        type: 'string',
    },
    {
        name: 'point',
        baseName: 'point',
        type: 'string',
    },
    {
        name: 'currency',
        baseName: 'currency',
        type: 'string',
    },
    {
        name: 'inDualMode',
        baseName: 'in_dual_mode',
        type: 'boolean',
    },
    {
        name: 'enableCredit',
        baseName: 'enable_credit',
        type: 'boolean',
    },
    {
        name: 'positionInitialMargin',
        baseName: 'position_initial_margin',
        type: 'string',
    },
    {
        name: 'maintenanceMargin',
        baseName: 'maintenance_margin',
        type: 'string',
    },
    {
        name: 'bonus',
        baseName: 'bonus',
        type: 'string',
    },
    {
        name: 'enableEvolvedClassic',
        baseName: 'enable_evolved_classic',
        type: 'boolean',
    },
    {
        name: 'crossOrderMargin',
        baseName: 'cross_order_margin',
        type: 'string',
    },
    {
        name: 'crossInitialMargin',
        baseName: 'cross_initial_margin',
        type: 'string',
    },
    {
        name: 'crossMaintenanceMargin',
        baseName: 'cross_maintenance_margin',
        type: 'string',
    },
    {
        name: 'crossUnrealisedPnl',
        baseName: 'cross_unrealised_pnl',
        type: 'string',
    },
    {
        name: 'crossAvailable',
        baseName: 'cross_available',
        type: 'string',
    },
    {
        name: 'crossMarginBalance',
        baseName: 'cross_margin_balance',
        type: 'string',
    },
    {
        name: 'crossMmr',
        baseName: 'cross_mmr',
        type: 'string',
    },
    {
        name: 'crossImr',
        baseName: 'cross_imr',
        type: 'string',
    },
    {
        name: 'isolatedPositionMargin',
        baseName: 'isolated_position_margin',
        type: 'string',
    },
    {
        name: 'enableNewDualMode',
        baseName: 'enable_new_dual_mode',
        type: 'boolean',
    },
    {
        name: 'marginMode',
        baseName: 'margin_mode',
        type: 'number',
    },
    {
        name: 'history',
        baseName: 'history',
        type: 'FuturesAccountHistory',
    },
];
