"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderCancel = void 0;
class OrderCancel {
    static getAttributeTypeMap() {
        return OrderCancel.attributeTypeMap;
    }
}
exports.OrderCancel = OrderCancel;
OrderCancel.discriminator = undefined;
OrderCancel.attributeTypeMap = [
    {
        name: 'id',
        baseName: 'id',
        type: 'string',
    },
    {
        name: 'text',
        baseName: 'text',
        type: 'string',
    },
    {
        name: 'amendText',
        baseName: 'amend_text',
        type: 'string',
    },
    {
        name: 'succeeded',
        baseName: 'succeeded',
        type: 'boolean',
    },
    {
        name: 'label',
        baseName: 'label',
        type: 'string',
    },
    {
        name: 'message',
        baseName: 'message',
        type: 'string',
    },
    {
        name: 'createTime',
        baseName: 'create_time',
        type: 'string',
    },
    {
        name: 'updateTime',
        baseName: 'update_time',
        type: 'string',
    },
    {
        name: 'createTimeMs',
        baseName: 'create_time_ms',
        type: 'number',
    },
    {
        name: 'updateTimeMs',
        baseName: 'update_time_ms',
        type: 'number',
    },
    {
        name: 'status',
        baseName: 'status',
        type: 'OrderCancel.Status',
    },
    {
        name: 'currencyPair',
        baseName: 'currency_pair',
        type: 'string',
    },
    {
        name: 'type',
        baseName: 'type',
        type: 'OrderCancel.Type',
    },
    {
        name: 'account',
        baseName: 'account',
        type: 'string',
    },
    {
        name: 'side',
        baseName: 'side',
        type: 'OrderCancel.Side',
    },
    {
        name: 'amount',
        baseName: 'amount',
        type: 'string',
    },
    {
        name: 'price',
        baseName: 'price',
        type: 'string',
    },
    {
        name: 'timeInForce',
        baseName: 'time_in_force',
        type: 'OrderCancel.TimeInForce',
    },
    {
        name: 'iceberg',
        baseName: 'iceberg',
        type: 'string',
    },
    {
        name: 'autoBorrow',
        baseName: 'auto_borrow',
        type: 'boolean',
    },
    {
        name: 'autoRepay',
        baseName: 'auto_repay',
        type: 'boolean',
    },
    {
        name: 'left',
        baseName: 'left',
        type: 'string',
    },
    {
        name: 'filledAmount',
        baseName: 'filled_amount',
        type: 'string',
    },
    {
        name: 'fillPrice',
        baseName: 'fill_price',
        type: 'string',
    },
    {
        name: 'filledTotal',
        baseName: 'filled_total',
        type: 'string',
    },
    {
        name: 'avgDealPrice',
        baseName: 'avg_deal_price',
        type: 'string',
    },
    {
        name: 'fee',
        baseName: 'fee',
        type: 'string',
    },
    {
        name: 'feeCurrency',
        baseName: 'fee_currency',
        type: 'string',
    },
    {
        name: 'pointFee',
        baseName: 'point_fee',
        type: 'string',
    },
    {
        name: 'gtFee',
        baseName: 'gt_fee',
        type: 'string',
    },
    {
        name: 'gtMakerFee',
        baseName: 'gt_maker_fee',
        type: 'string',
    },
    {
        name: 'gtTakerFee',
        baseName: 'gt_taker_fee',
        type: 'string',
    },
    {
        name: 'gtDiscount',
        baseName: 'gt_discount',
        type: 'boolean',
    },
    {
        name: 'rebatedFee',
        baseName: 'rebated_fee',
        type: 'string',
    },
    {
        name: 'rebatedFeeCurrency',
        baseName: 'rebated_fee_currency',
        type: 'string',
    },
    {
        name: 'stpId',
        baseName: 'stp_id',
        type: 'number',
    },
    {
        name: 'stpAct',
        baseName: 'stp_act',
        type: 'OrderCancel.StpAct',
    },
    {
        name: 'finishAs',
        baseName: 'finish_as',
        type: 'OrderCancel.FinishAs',
    },
    {
        name: 'actionMode',
        baseName: 'action_mode',
        type: 'string',
    },
];
(function (OrderCancel) {
    let Status;
    (function (Status) {
        Status[Status["Open"] = 'open'] = "Open";
        Status[Status["Closed"] = 'closed'] = "Closed";
        Status[Status["Cancelled"] = 'cancelled'] = "Cancelled";
    })(Status = OrderCancel.Status || (OrderCancel.Status = {}));
    let Type;
    (function (Type) {
        Type[Type["Limit"] = 'limit'] = "Limit";
        Type[Type["Market"] = 'market'] = "Market";
    })(Type = OrderCancel.Type || (OrderCancel.Type = {}));
    let Side;
    (function (Side) {
        Side[Side["Buy"] = 'buy'] = "Buy";
        Side[Side["Sell"] = 'sell'] = "Sell";
    })(Side = OrderCancel.Side || (OrderCancel.Side = {}));
    let TimeInForce;
    (function (TimeInForce) {
        TimeInForce[TimeInForce["Gtc"] = 'gtc'] = "Gtc";
        TimeInForce[TimeInForce["Ioc"] = 'ioc'] = "Ioc";
        TimeInForce[TimeInForce["Poc"] = 'poc'] = "Poc";
        TimeInForce[TimeInForce["Fok"] = 'fok'] = "Fok";
    })(TimeInForce = OrderCancel.TimeInForce || (OrderCancel.TimeInForce = {}));
    let StpAct;
    (function (StpAct) {
        StpAct[StpAct["Cn"] = 'cn'] = "Cn";
        StpAct[StpAct["Co"] = 'co'] = "Co";
        StpAct[StpAct["Cb"] = 'cb'] = "Cb";
        StpAct[StpAct["Minus"] = '-'] = "Minus";
    })(StpAct = OrderCancel.StpAct || (OrderCancel.StpAct = {}));
    let FinishAs;
    (function (FinishAs) {
        FinishAs[FinishAs["Open"] = 'open'] = "Open";
        FinishAs[FinishAs["Filled"] = 'filled'] = "Filled";
        FinishAs[FinishAs["Cancelled"] = 'cancelled'] = "Cancelled";
        FinishAs[FinishAs["Ioc"] = 'ioc'] = "Ioc";
        FinishAs[FinishAs["Stp"] = 'stp'] = "Stp";
    })(FinishAs = OrderCancel.FinishAs || (OrderCancel.FinishAs = {}));
})(OrderCancel || (exports.OrderCancel = OrderCancel = {}));
