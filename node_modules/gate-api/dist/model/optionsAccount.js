"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionsAccount = void 0;
class OptionsAccount {
    static getAttributeTypeMap() {
        return OptionsAccount.attributeTypeMap;
    }
}
exports.OptionsAccount = OptionsAccount;
OptionsAccount.discriminator = undefined;
OptionsAccount.attributeTypeMap = [
    {
        name: 'user',
        baseName: 'user',
        type: 'number',
    },
    {
        name: 'total',
        baseName: 'total',
        type: 'string',
    },
    {
        name: 'positionValue',
        baseName: 'position_value',
        type: 'string',
    },
    {
        name: 'equity',
        baseName: 'equity',
        type: 'string',
    },
    {
        name: 'shortEnabled',
        baseName: 'short_enabled',
        type: 'boolean',
    },
    {
        name: 'mmpEnabled',
        baseName: 'mmp_enabled',
        type: 'boolean',
    },
    {
        name: 'liqTriggered',
        baseName: 'liq_triggered',
        type: 'boolean',
    },
    {
        name: 'marginMode',
        baseName: 'margin_mode',
        type: 'OptionsAccount.MarginMode',
    },
    {
        name: 'unrealisedPnl',
        baseName: 'unrealised_pnl',
        type: 'string',
    },
    {
        name: 'initMargin',
        baseName: 'init_margin',
        type: 'string',
    },
    {
        name: 'maintMargin',
        baseName: 'maint_margin',
        type: 'string',
    },
    {
        name: 'orderMargin',
        baseName: 'order_margin',
        type: 'string',
    },
    {
        name: 'askOrderMargin',
        baseName: 'ask_order_margin',
        type: 'string',
    },
    {
        name: 'bidOrderMargin',
        baseName: 'bid_order_margin',
        type: 'string',
    },
    {
        name: 'available',
        baseName: 'available',
        type: 'string',
    },
    {
        name: 'point',
        baseName: 'point',
        type: 'string',
    },
    {
        name: 'currency',
        baseName: 'currency',
        type: 'string',
    },
    {
        name: 'ordersLimit',
        baseName: 'orders_limit',
        type: 'number',
    },
    {
        name: 'positionNotionalLimit',
        baseName: 'position_notional_limit',
        type: 'number',
    },
];
(function (OptionsAccount) {
    let MarginMode;
    (function (MarginMode) {
        MarginMode[MarginMode["NUMBER_0"] = 0] = "NUMBER_0";
        MarginMode[MarginMode["NUMBER_1"] = 1] = "NUMBER_1";
        MarginMode[MarginMode["NUMBER_2"] = 2] = "NUMBER_2";
    })(MarginMode = OptionsAccount.MarginMode || (OptionsAccount.MarginMode = {}));
})(OptionsAccount || (exports.OptionsAccount = OptionsAccount = {}));
