import { CollateralAlign } from '../model/collateralAlign';
import { CollateralLoanCurrency } from '../model/collateralLoanCurrency';
import { CollateralOrder } from '../model/collateralOrder';
import { CollateralRecord } from '../model/collateralRecord';
import { CreateCollateralOrder } from '../model/createCollateralOrder';
import { OrderResp } from '../model/orderResp';
import { RepayLoan } from '../model/repayLoan';
import { RepayRecord } from '../model/repayRecord';
import { RepayResp } from '../model/repayResp';
import { UserLtvInfo } from '../model/userLtvInfo';
import { UserTotalAmount } from '../model/userTotalAmount';
import { ApiClient } from './apiClient';
import { AxiosResponse } from 'axios';
export declare class CollateralLoanApi {
    protected client: ApiClient;
    constructor(client?: ApiClient);
    listCollateralLoanOrders(opts: {
        page?: number;
        limit?: number;
        collateralCurrency?: string;
        borrowCurrency?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<CollateralOrder>;
    }>;
    createCollateralLoan(createCollateralOrder: CreateCollateralOrder): Promise<{
        response: AxiosResponse;
        body: OrderResp;
    }>;
    getCollateralLoanOrderDetail(orderId: number): Promise<{
        response: AxiosResponse;
        body: CollateralOrder;
    }>;
    repayCollateralLoan(repayLoan: RepayLoan): Promise<{
        response: AxiosResponse;
        body: RepayResp;
    }>;
    listRepayRecords(source: string, opts: {
        borrowCurrency?: string;
        collateralCurrency?: string;
        page?: number;
        limit?: number;
        from?: number;
        to?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<RepayRecord>;
    }>;
    listCollateralRecords(opts: {
        page?: number;
        limit?: number;
        from?: number;
        to?: number;
        borrowCurrency?: string;
        collateralCurrency?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<CollateralRecord>;
    }>;
    operateCollateral(collateralAlign: CollateralAlign): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    getUserTotalAmount(): Promise<{
        response: AxiosResponse;
        body: UserTotalAmount;
    }>;
    getUserLtvInfo(collateralCurrency: string, borrowCurrency: string): Promise<{
        response: AxiosResponse;
        body: UserLtvInfo;
    }>;
    listCollateralCurrencies(opts: {
        loanCurrency?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<CollateralLoanCurrency>;
    }>;
}
