import { BatchAmendItem } from '../model/batchAmendItem';
import { BatchOrder } from '../model/batchOrder';
import { CancelBatchOrder } from '../model/cancelBatchOrder';
import { CancelOrderResult } from '../model/cancelOrderResult';
import { CountdownCancelAllSpotTask } from '../model/countdownCancelAllSpotTask';
import { Currency } from '../model/currency';
import { CurrencyPair } from '../model/currencyPair';
import { LiquidateOrder } from '../model/liquidateOrder';
import { OpenOrders } from '../model/openOrders';
import { Order } from '../model/order';
import { OrderBook } from '../model/orderBook';
import { OrderCancel } from '../model/orderCancel';
import { OrderPatch } from '../model/orderPatch';
import { SpotAccount } from '../model/spotAccount';
import { SpotAccountBook } from '../model/spotAccountBook';
import { SpotFee } from '../model/spotFee';
import { SpotInsuranceHistory } from '../model/spotInsuranceHistory';
import { SpotPriceTriggeredOrder } from '../model/spotPriceTriggeredOrder';
import { SystemTime } from '../model/systemTime';
import { Ticker } from '../model/ticker';
import { Trade } from '../model/trade';
import { TriggerOrderResponse } from '../model/triggerOrderResponse';
import { TriggerTime } from '../model/triggerTime';
import { ApiClient } from './apiClient';
import { AxiosResponse } from 'axios';
export declare class SpotApi {
    protected client: ApiClient;
    constructor(client?: ApiClient);
    listCurrencies(): Promise<{
        response: AxiosResponse;
        body: Array<Currency>;
    }>;
    getCurrency(currency: string): Promise<{
        response: AxiosResponse;
        body: Currency;
    }>;
    listCurrencyPairs(): Promise<{
        response: AxiosResponse;
        body: Array<CurrencyPair>;
    }>;
    getCurrencyPair(currencyPair: string): Promise<{
        response: AxiosResponse;
        body: CurrencyPair;
    }>;
    listTickers(opts: {
        currencyPair?: string;
        timezone?: 'utc0' | 'utc8' | 'all';
    }): Promise<{
        response: AxiosResponse;
        body: Array<Ticker>;
    }>;
    listOrderBook(currencyPair: string, opts: {
        interval?: string;
        limit?: number;
        withId?: boolean;
    }): Promise<{
        response: AxiosResponse;
        body: OrderBook;
    }>;
    listTrades(currencyPair: string, opts: {
        limit?: number;
        lastId?: string;
        reverse?: boolean;
        from?: number;
        to?: number;
        page?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<Trade>;
    }>;
    listCandlesticks(currencyPair: string, opts: {
        limit?: number;
        from?: number;
        to?: number;
        interval?: '1s' | '10s' | '1m' | '5m' | '15m' | '30m' | '1h' | '4h' | '8h' | '1d' | '7d' | '30d';
    }): Promise<{
        response: AxiosResponse;
        body: Array<Array<string>>;
    }>;
    getFee(opts: {
        currencyPair?: string;
    }): Promise<{
        response: AxiosResponse;
        body: SpotFee;
    }>;
    getBatchSpotFee(currencyPairs: string): Promise<{
        response: AxiosResponse;
        body: {
            [key: string]: SpotFee;
        };
    }>;
    listSpotAccounts(opts: {
        currency?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<SpotAccount>;
    }>;
    listSpotAccountBook(opts: {
        currency?: string;
        from?: number;
        to?: number;
        page?: number;
        limit?: number;
        type?: string;
        code?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<SpotAccountBook>;
    }>;
    createBatchOrders(order: Array<Order>, opts: {
        xGateExptime?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<BatchOrder>;
    }>;
    listAllOpenOrders(opts: {
        page?: number;
        limit?: number;
        account?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<OpenOrders>;
    }>;
    createCrossLiquidateOrder(liquidateOrder: LiquidateOrder): Promise<{
        response: AxiosResponse;
        body: Order;
    }>;
    listOrders(currencyPair: string, status: string, opts: {
        page?: number;
        limit?: number;
        account?: string;
        from?: number;
        to?: number;
        side?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<Order>;
    }>;
    createOrder(order: Order, opts: {
        xGateExptime?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Order;
    }>;
    cancelOrders(opts: {
        currencyPair?: string;
        side?: string;
        account?: string;
        actionMode?: string;
        xGateExptime?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<OrderCancel>;
    }>;
    cancelBatchOrders(cancelBatchOrder: Array<CancelBatchOrder>, opts: {
        xGateExptime?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<CancelOrderResult>;
    }>;
    getOrder(orderId: string, currencyPair: string, opts: {
        account?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Order;
    }>;
    cancelOrder(orderId: string, currencyPair: string, opts: {
        account?: string;
        actionMode?: string;
        xGateExptime?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Order;
    }>;
    amendOrder(orderId: string, orderPatch: OrderPatch, opts: {
        currencyPair?: string;
        account?: string;
        xGateExptime?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Order;
    }>;
    listMyTrades(opts: {
        currencyPair?: string;
        limit?: number;
        page?: number;
        orderId?: string;
        account?: string;
        from?: number;
        to?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<Trade>;
    }>;
    getSystemTime(): Promise<{
        response: AxiosResponse;
        body: SystemTime;
    }>;
    countdownCancelAllSpot(countdownCancelAllSpotTask: CountdownCancelAllSpotTask): Promise<{
        response: AxiosResponse;
        body: TriggerTime;
    }>;
    amendBatchOrders(batchAmendItem: Array<BatchAmendItem>, opts: {
        xGateExptime?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<BatchOrder>;
    }>;
    getSpotInsuranceHistory(business: string, currency: string, from: number, to: number, opts: {
        page?: number;
        limit?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<SpotInsuranceHistory>;
    }>;
    listSpotPriceTriggeredOrders(status: 'open' | 'finished', opts: {
        market?: string;
        account?: 'normal' | 'margin' | 'unified';
        limit?: number;
        offset?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<SpotPriceTriggeredOrder>;
    }>;
    createSpotPriceTriggeredOrder(spotPriceTriggeredOrder: SpotPriceTriggeredOrder): Promise<{
        response: AxiosResponse;
        body: TriggerOrderResponse;
    }>;
    cancelSpotPriceTriggeredOrderList(opts: {
        market?: string;
        account?: 'normal' | 'margin' | 'unified';
    }): Promise<{
        response: AxiosResponse;
        body: Array<SpotPriceTriggeredOrder>;
    }>;
    getSpotPriceTriggeredOrder(orderId: string): Promise<{
        response: AxiosResponse;
        body: SpotPriceTriggeredOrder;
    }>;
    cancelSpotPriceTriggeredOrder(orderId: string): Promise<{
        response: AxiosResponse;
        body: SpotPriceTriggeredOrder;
    }>;
}
