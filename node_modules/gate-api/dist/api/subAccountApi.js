"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubAccountApi = void 0;
const models_1 = require("../model/models");
const apiClient_1 = require("./apiClient");
class SubAccountApi {
    constructor(client) {
        if (client) {
            this.client = client;
        }
        else {
            this.client = new apiClient_1.ApiClient();
        }
    }
    async listSubAccounts(opts) {
        const localVarPath = this.client.basePath + '/sub_accounts';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(opts.type, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<SubAccount>', authSettings);
    }
    async createSubAccounts(subAccount) {
        const localVarPath = this.client.basePath + '/sub_accounts';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (subAccount === null || subAccount === undefined) {
            throw new Error('Required parameter subAccount was null or undefined when calling createSubAccounts.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(subAccount, 'SubAccount'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'SubAccount', authSettings);
    }
    async getSubAccount(userId) {
        const localVarPath = this.client.basePath +
            '/sub_accounts/{user_id}'.replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getSubAccount.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'SubAccount', authSettings);
    }
    async listSubAccountKeys(userId) {
        const localVarPath = this.client.basePath +
            '/sub_accounts/{user_id}/keys'.replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling listSubAccountKeys.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<SubAccountKey>', authSettings);
    }
    async createSubAccountKeys(userId, subAccountKey) {
        const localVarPath = this.client.basePath +
            '/sub_accounts/{user_id}/keys'.replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling createSubAccountKeys.');
        }
        if (subAccountKey === null || subAccountKey === undefined) {
            throw new Error('Required parameter subAccountKey was null or undefined when calling createSubAccountKeys.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(subAccountKey, 'SubAccountKey'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<SubAccountKey>', authSettings);
    }
    async getSubAccountKey(userId, key) {
        const localVarPath = this.client.basePath +
            '/sub_accounts/{user_id}/keys/{key}'
                .replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)))
                .replace('{' + 'key' + '}', encodeURIComponent(String(key)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getSubAccountKey.');
        }
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getSubAccountKey.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'SubAccountKey', authSettings);
    }
    async updateSubAccountKeys(userId, key, subAccountKey) {
        const localVarPath = this.client.basePath +
            '/sub_accounts/{user_id}/keys/{key}'
                .replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)))
                .replace('{' + 'key' + '}', encodeURIComponent(String(key)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling updateSubAccountKeys.');
        }
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling updateSubAccountKeys.');
        }
        if (subAccountKey === null || subAccountKey === undefined) {
            throw new Error('Required parameter subAccountKey was null or undefined when calling updateSubAccountKeys.');
        }
        const config = {
            method: 'PUT',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(subAccountKey, 'SubAccountKey'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '', authSettings);
    }
    async deleteSubAccountKeys(userId, key) {
        const localVarPath = this.client.basePath +
            '/sub_accounts/{user_id}/keys/{key}'
                .replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)))
                .replace('{' + 'key' + '}', encodeURIComponent(String(key)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteSubAccountKeys.');
        }
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling deleteSubAccountKeys.');
        }
        const config = {
            method: 'DELETE',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '', authSettings);
    }
    async lockSubAccount(userId) {
        const localVarPath = this.client.basePath +
            '/sub_accounts/{user_id}/lock'.replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling lockSubAccount.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '', authSettings);
    }
    async unlockSubAccount(userId) {
        const localVarPath = this.client.basePath +
            '/sub_accounts/{user_id}/unlock'.replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling unlockSubAccount.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '', authSettings);
    }
    async listUnifiedMode() {
        const localVarPath = this.client.basePath + '/sub_accounts/unified_mode';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<SubUserMode>', authSettings);
    }
}
exports.SubAccountApi = SubAccountApi;
