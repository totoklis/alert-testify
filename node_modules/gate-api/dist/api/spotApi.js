"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpotApi = void 0;
const models_1 = require("../model/models");
const apiClient_1 = require("./apiClient");
class SpotApi {
    constructor(client) {
        if (client) {
            this.client = client;
        }
        else {
            this.client = new apiClient_1.ApiClient();
        }
    }
    async listCurrencies() {
        const localVarPath = this.client.basePath + '/spot/currencies';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<Currency>', authSettings);
    }
    async getCurrency(currency) {
        const localVarPath = this.client.basePath +
            '/spot/currencies/{currency}'.replace('{' + 'currency' + '}', encodeURIComponent(String(currency)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getCurrency.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Currency', authSettings);
    }
    async listCurrencyPairs() {
        const localVarPath = this.client.basePath + '/spot/currency_pairs';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<CurrencyPair>', authSettings);
    }
    async getCurrencyPair(currencyPair) {
        const localVarPath = this.client.basePath +
            '/spot/currency_pairs/{currency_pair}'.replace('{' + 'currency_pair' + '}', encodeURIComponent(String(currencyPair)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currencyPair === null || currencyPair === undefined) {
            throw new Error('Required parameter currencyPair was null or undefined when calling getCurrencyPair.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'CurrencyPair', authSettings);
    }
    async listTickers(opts) {
        const localVarPath = this.client.basePath + '/spot/tickers';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currencyPair !== undefined) {
            localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(opts.currencyPair, 'string');
        }
        if (opts.timezone !== undefined) {
            localVarQueryParameters['timezone'] = models_1.ObjectSerializer.serialize(opts.timezone, "'utc0' | 'utc8' | 'all'");
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<Ticker>', authSettings);
    }
    async listOrderBook(currencyPair, opts) {
        const localVarPath = this.client.basePath + '/spot/order_book';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currencyPair === null || currencyPair === undefined) {
            throw new Error('Required parameter currencyPair was null or undefined when calling listOrderBook.');
        }
        opts = opts || {};
        localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(currencyPair, 'string');
        if (opts.interval !== undefined) {
            localVarQueryParameters['interval'] = models_1.ObjectSerializer.serialize(opts.interval, 'string');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.withId !== undefined) {
            localVarQueryParameters['with_id'] = models_1.ObjectSerializer.serialize(opts.withId, 'boolean');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'OrderBook', authSettings);
    }
    async listTrades(currencyPair, opts) {
        const localVarPath = this.client.basePath + '/spot/trades';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currencyPair === null || currencyPair === undefined) {
            throw new Error('Required parameter currencyPair was null or undefined when calling listTrades.');
        }
        opts = opts || {};
        localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(currencyPair, 'string');
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.lastId !== undefined) {
            localVarQueryParameters['last_id'] = models_1.ObjectSerializer.serialize(opts.lastId, 'string');
        }
        if (opts.reverse !== undefined) {
            localVarQueryParameters['reverse'] = models_1.ObjectSerializer.serialize(opts.reverse, 'boolean');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<Trade>', authSettings);
    }
    async listCandlesticks(currencyPair, opts) {
        const localVarPath = this.client.basePath + '/spot/candlesticks';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currencyPair === null || currencyPair === undefined) {
            throw new Error('Required parameter currencyPair was null or undefined when calling listCandlesticks.');
        }
        opts = opts || {};
        localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(currencyPair, 'string');
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.interval !== undefined) {
            localVarQueryParameters['interval'] = models_1.ObjectSerializer.serialize(opts.interval, "'1s' | '10s' | '1m' | '5m' | '15m' | '30m' | '1h' | '4h' | '8h' | '1d' | '7d' | '30d'");
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<Array<string>>', authSettings);
    }
    async getFee(opts) {
        const localVarPath = this.client.basePath + '/spot/fee';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currencyPair !== undefined) {
            localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(opts.currencyPair, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'SpotFee', authSettings);
    }
    async getBatchSpotFee(currencyPairs) {
        const localVarPath = this.client.basePath + '/spot/batch_fee';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currencyPairs === null || currencyPairs === undefined) {
            throw new Error('Required parameter currencyPairs was null or undefined when calling getBatchSpotFee.');
        }
        localVarQueryParameters['currency_pairs'] = models_1.ObjectSerializer.serialize(currencyPairs, 'string');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '{ [key: string]: SpotFee; }', authSettings);
    }
    async listSpotAccounts(opts) {
        const localVarPath = this.client.basePath + '/spot/accounts';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<SpotAccount>', authSettings);
    }
    async listSpotAccountBook(opts) {
        const localVarPath = this.client.basePath + '/spot/account_book';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(opts.type, 'string');
        }
        if (opts.code !== undefined) {
            localVarQueryParameters['code'] = models_1.ObjectSerializer.serialize(opts.code, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<SpotAccountBook>', authSettings);
    }
    async createBatchOrders(order, opts) {
        const localVarPath = this.client.basePath + '/spot/batch_orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (order === null || order === undefined) {
            throw new Error('Required parameter order was null or undefined when calling createBatchOrders.');
        }
        opts = opts || {};
        if (opts.xGateExptime !== undefined) {
            localVarHeaderParams['x-gate-exptime'] = models_1.ObjectSerializer.serialize(opts.xGateExptime, 'string');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(order, 'Array<Order>'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<BatchOrder>', authSettings);
    }
    async listAllOpenOrders(opts) {
        const localVarPath = this.client.basePath + '/spot/open_orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.account !== undefined) {
            localVarQueryParameters['account'] = models_1.ObjectSerializer.serialize(opts.account, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<OpenOrders>', authSettings);
    }
    async createCrossLiquidateOrder(liquidateOrder) {
        const localVarPath = this.client.basePath + '/spot/cross_liquidate_orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (liquidateOrder === null || liquidateOrder === undefined) {
            throw new Error('Required parameter liquidateOrder was null or undefined when calling createCrossLiquidateOrder.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(liquidateOrder, 'LiquidateOrder'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Order', authSettings);
    }
    async listOrders(currencyPair, status, opts) {
        const localVarPath = this.client.basePath + '/spot/orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currencyPair === null || currencyPair === undefined) {
            throw new Error('Required parameter currencyPair was null or undefined when calling listOrders.');
        }
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling listOrders.');
        }
        opts = opts || {};
        localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(currencyPair, 'string');
        localVarQueryParameters['status'] = models_1.ObjectSerializer.serialize(status, 'string');
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.account !== undefined) {
            localVarQueryParameters['account'] = models_1.ObjectSerializer.serialize(opts.account, 'string');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.side !== undefined) {
            localVarQueryParameters['side'] = models_1.ObjectSerializer.serialize(opts.side, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<Order>', authSettings);
    }
    async createOrder(order, opts) {
        const localVarPath = this.client.basePath + '/spot/orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (order === null || order === undefined) {
            throw new Error('Required parameter order was null or undefined when calling createOrder.');
        }
        opts = opts || {};
        if (opts.xGateExptime !== undefined) {
            localVarHeaderParams['x-gate-exptime'] = models_1.ObjectSerializer.serialize(opts.xGateExptime, 'string');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(order, 'Order'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Order', authSettings);
    }
    async cancelOrders(opts) {
        const localVarPath = this.client.basePath + '/spot/orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currencyPair !== undefined) {
            localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(opts.currencyPair, 'string');
        }
        if (opts.side !== undefined) {
            localVarQueryParameters['side'] = models_1.ObjectSerializer.serialize(opts.side, 'string');
        }
        if (opts.account !== undefined) {
            localVarQueryParameters['account'] = models_1.ObjectSerializer.serialize(opts.account, 'string');
        }
        if (opts.actionMode !== undefined) {
            localVarQueryParameters['action_mode'] = models_1.ObjectSerializer.serialize(opts.actionMode, 'string');
        }
        if (opts.xGateExptime !== undefined) {
            localVarHeaderParams['x-gate-exptime'] = models_1.ObjectSerializer.serialize(opts.xGateExptime, 'string');
        }
        const config = {
            method: 'DELETE',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<OrderCancel>', authSettings);
    }
    async cancelBatchOrders(cancelBatchOrder, opts) {
        const localVarPath = this.client.basePath + '/spot/cancel_batch_orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (cancelBatchOrder === null || cancelBatchOrder === undefined) {
            throw new Error('Required parameter cancelBatchOrder was null or undefined when calling cancelBatchOrders.');
        }
        opts = opts || {};
        if (opts.xGateExptime !== undefined) {
            localVarHeaderParams['x-gate-exptime'] = models_1.ObjectSerializer.serialize(opts.xGateExptime, 'string');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(cancelBatchOrder, 'Array<CancelBatchOrder>'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<CancelOrderResult>', authSettings);
    }
    async getOrder(orderId, currencyPair, opts) {
        const localVarPath = this.client.basePath +
            '/spot/orders/{order_id}'.replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getOrder.');
        }
        if (currencyPair === null || currencyPair === undefined) {
            throw new Error('Required parameter currencyPair was null or undefined when calling getOrder.');
        }
        opts = opts || {};
        localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(currencyPair, 'string');
        if (opts.account !== undefined) {
            localVarQueryParameters['account'] = models_1.ObjectSerializer.serialize(opts.account, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Order', authSettings);
    }
    async cancelOrder(orderId, currencyPair, opts) {
        const localVarPath = this.client.basePath +
            '/spot/orders/{order_id}'.replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling cancelOrder.');
        }
        if (currencyPair === null || currencyPair === undefined) {
            throw new Error('Required parameter currencyPair was null or undefined when calling cancelOrder.');
        }
        opts = opts || {};
        localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(currencyPair, 'string');
        if (opts.account !== undefined) {
            localVarQueryParameters['account'] = models_1.ObjectSerializer.serialize(opts.account, 'string');
        }
        if (opts.actionMode !== undefined) {
            localVarQueryParameters['action_mode'] = models_1.ObjectSerializer.serialize(opts.actionMode, 'string');
        }
        if (opts.xGateExptime !== undefined) {
            localVarHeaderParams['x-gate-exptime'] = models_1.ObjectSerializer.serialize(opts.xGateExptime, 'string');
        }
        const config = {
            method: 'DELETE',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Order', authSettings);
    }
    async amendOrder(orderId, orderPatch, opts) {
        const localVarPath = this.client.basePath +
            '/spot/orders/{order_id}'.replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling amendOrder.');
        }
        if (orderPatch === null || orderPatch === undefined) {
            throw new Error('Required parameter orderPatch was null or undefined when calling amendOrder.');
        }
        opts = opts || {};
        if (opts.currencyPair !== undefined) {
            localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(opts.currencyPair, 'string');
        }
        if (opts.account !== undefined) {
            localVarQueryParameters['account'] = models_1.ObjectSerializer.serialize(opts.account, 'string');
        }
        if (opts.xGateExptime !== undefined) {
            localVarHeaderParams['x-gate-exptime'] = models_1.ObjectSerializer.serialize(opts.xGateExptime, 'string');
        }
        const config = {
            method: 'PATCH',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(orderPatch, 'OrderPatch'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Order', authSettings);
    }
    async listMyTrades(opts) {
        const localVarPath = this.client.basePath + '/spot/my_trades';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currencyPair !== undefined) {
            localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(opts.currencyPair, 'string');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.orderId !== undefined) {
            localVarQueryParameters['order_id'] = models_1.ObjectSerializer.serialize(opts.orderId, 'string');
        }
        if (opts.account !== undefined) {
            localVarQueryParameters['account'] = models_1.ObjectSerializer.serialize(opts.account, 'string');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<Trade>', authSettings);
    }
    async getSystemTime() {
        const localVarPath = this.client.basePath + '/spot/time';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'SystemTime', authSettings);
    }
    async countdownCancelAllSpot(countdownCancelAllSpotTask) {
        const localVarPath = this.client.basePath + '/spot/countdown_cancel_all';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (countdownCancelAllSpotTask === null || countdownCancelAllSpotTask === undefined) {
            throw new Error('Required parameter countdownCancelAllSpotTask was null or undefined when calling countdownCancelAllSpot.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(countdownCancelAllSpotTask, 'CountdownCancelAllSpotTask'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'TriggerTime', authSettings);
    }
    async amendBatchOrders(batchAmendItem, opts) {
        const localVarPath = this.client.basePath + '/spot/amend_batch_orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (batchAmendItem === null || batchAmendItem === undefined) {
            throw new Error('Required parameter batchAmendItem was null or undefined when calling amendBatchOrders.');
        }
        opts = opts || {};
        if (opts.xGateExptime !== undefined) {
            localVarHeaderParams['x-gate-exptime'] = models_1.ObjectSerializer.serialize(opts.xGateExptime, 'string');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(batchAmendItem, 'Array<BatchAmendItem>'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<BatchOrder>', authSettings);
    }
    async getSpotInsuranceHistory(business, currency, from, to, opts) {
        const localVarPath = this.client.basePath + '/spot/insurance_history';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (business === null || business === undefined) {
            throw new Error('Required parameter business was null or undefined when calling getSpotInsuranceHistory.');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getSpotInsuranceHistory.');
        }
        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling getSpotInsuranceHistory.');
        }
        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling getSpotInsuranceHistory.');
        }
        opts = opts || {};
        localVarQueryParameters['business'] = models_1.ObjectSerializer.serialize(business, 'string');
        localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(currency, 'string');
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(from, 'number');
        localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(to, 'number');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<SpotInsuranceHistory>', authSettings);
    }
    async listSpotPriceTriggeredOrders(status, opts) {
        const localVarPath = this.client.basePath + '/spot/price_orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling listSpotPriceTriggeredOrders.');
        }
        opts = opts || {};
        localVarQueryParameters['status'] = models_1.ObjectSerializer.serialize(status, "'open' | 'finished'");
        if (opts.market !== undefined) {
            localVarQueryParameters['market'] = models_1.ObjectSerializer.serialize(opts.market, 'string');
        }
        if (opts.account !== undefined) {
            localVarQueryParameters['account'] = models_1.ObjectSerializer.serialize(opts.account, "'normal' | 'margin' | 'unified'");
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<SpotPriceTriggeredOrder>', authSettings);
    }
    async createSpotPriceTriggeredOrder(spotPriceTriggeredOrder) {
        const localVarPath = this.client.basePath + '/spot/price_orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (spotPriceTriggeredOrder === null || spotPriceTriggeredOrder === undefined) {
            throw new Error('Required parameter spotPriceTriggeredOrder was null or undefined when calling createSpotPriceTriggeredOrder.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(spotPriceTriggeredOrder, 'SpotPriceTriggeredOrder'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'TriggerOrderResponse', authSettings);
    }
    async cancelSpotPriceTriggeredOrderList(opts) {
        const localVarPath = this.client.basePath + '/spot/price_orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.market !== undefined) {
            localVarQueryParameters['market'] = models_1.ObjectSerializer.serialize(opts.market, 'string');
        }
        if (opts.account !== undefined) {
            localVarQueryParameters['account'] = models_1.ObjectSerializer.serialize(opts.account, "'normal' | 'margin' | 'unified'");
        }
        const config = {
            method: 'DELETE',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<SpotPriceTriggeredOrder>', authSettings);
    }
    async getSpotPriceTriggeredOrder(orderId) {
        const localVarPath = this.client.basePath +
            '/spot/price_orders/{order_id}'.replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getSpotPriceTriggeredOrder.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'SpotPriceTriggeredOrder', authSettings);
    }
    async cancelSpotPriceTriggeredOrder(orderId) {
        const localVarPath = this.client.basePath +
            '/spot/price_orders/{order_id}'.replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling cancelSpotPriceTriggeredOrder.');
        }
        const config = {
            method: 'DELETE',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'SpotPriceTriggeredOrder', authSettings);
    }
}
exports.SpotApi = SpotApi;
