"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollateralLoanApi = void 0;
const models_1 = require("../model/models");
const apiClient_1 = require("./apiClient");
class CollateralLoanApi {
    constructor(client) {
        if (client) {
            this.client = client;
        }
        else {
            this.client = new apiClient_1.ApiClient();
        }
    }
    async listCollateralLoanOrders(opts) {
        const localVarPath = this.client.basePath + '/loan/collateral/orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.collateralCurrency !== undefined) {
            localVarQueryParameters['collateral_currency'] = models_1.ObjectSerializer.serialize(opts.collateralCurrency, 'string');
        }
        if (opts.borrowCurrency !== undefined) {
            localVarQueryParameters['borrow_currency'] = models_1.ObjectSerializer.serialize(opts.borrowCurrency, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<CollateralOrder>', authSettings);
    }
    async createCollateralLoan(createCollateralOrder) {
        const localVarPath = this.client.basePath + '/loan/collateral/orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (createCollateralOrder === null || createCollateralOrder === undefined) {
            throw new Error('Required parameter createCollateralOrder was null or undefined when calling createCollateralLoan.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(createCollateralOrder, 'CreateCollateralOrder'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'OrderResp', authSettings);
    }
    async getCollateralLoanOrderDetail(orderId) {
        const localVarPath = this.client.basePath +
            '/loan/collateral/orders/{order_id}'.replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getCollateralLoanOrderDetail.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'CollateralOrder', authSettings);
    }
    async repayCollateralLoan(repayLoan) {
        const localVarPath = this.client.basePath + '/loan/collateral/repay';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (repayLoan === null || repayLoan === undefined) {
            throw new Error('Required parameter repayLoan was null or undefined when calling repayCollateralLoan.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(repayLoan, 'RepayLoan'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'RepayResp', authSettings);
    }
    async listRepayRecords(source, opts) {
        const localVarPath = this.client.basePath + '/loan/collateral/repay_records';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (source === null || source === undefined) {
            throw new Error('Required parameter source was null or undefined when calling listRepayRecords.');
        }
        opts = opts || {};
        localVarQueryParameters['source'] = models_1.ObjectSerializer.serialize(source, 'string');
        if (opts.borrowCurrency !== undefined) {
            localVarQueryParameters['borrow_currency'] = models_1.ObjectSerializer.serialize(opts.borrowCurrency, 'string');
        }
        if (opts.collateralCurrency !== undefined) {
            localVarQueryParameters['collateral_currency'] = models_1.ObjectSerializer.serialize(opts.collateralCurrency, 'string');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<RepayRecord>', authSettings);
    }
    async listCollateralRecords(opts) {
        const localVarPath = this.client.basePath + '/loan/collateral/collaterals';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.borrowCurrency !== undefined) {
            localVarQueryParameters['borrow_currency'] = models_1.ObjectSerializer.serialize(opts.borrowCurrency, 'string');
        }
        if (opts.collateralCurrency !== undefined) {
            localVarQueryParameters['collateral_currency'] = models_1.ObjectSerializer.serialize(opts.collateralCurrency, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<CollateralRecord>', authSettings);
    }
    async operateCollateral(collateralAlign) {
        const localVarPath = this.client.basePath + '/loan/collateral/collaterals';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        if (collateralAlign === null || collateralAlign === undefined) {
            throw new Error('Required parameter collateralAlign was null or undefined when calling operateCollateral.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(collateralAlign, 'CollateralAlign'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '', authSettings);
    }
    async getUserTotalAmount() {
        const localVarPath = this.client.basePath + '/loan/collateral/total_amount';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'UserTotalAmount', authSettings);
    }
    async getUserLtvInfo(collateralCurrency, borrowCurrency) {
        const localVarPath = this.client.basePath + '/loan/collateral/ltv';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (collateralCurrency === null || collateralCurrency === undefined) {
            throw new Error('Required parameter collateralCurrency was null or undefined when calling getUserLtvInfo.');
        }
        if (borrowCurrency === null || borrowCurrency === undefined) {
            throw new Error('Required parameter borrowCurrency was null or undefined when calling getUserLtvInfo.');
        }
        localVarQueryParameters['collateral_currency'] = models_1.ObjectSerializer.serialize(collateralCurrency, 'string');
        localVarQueryParameters['borrow_currency'] = models_1.ObjectSerializer.serialize(borrowCurrency, 'string');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'UserLtvInfo', authSettings);
    }
    async listCollateralCurrencies(opts) {
        const localVarPath = this.client.basePath + '/loan/collateral/currencies';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.loanCurrency !== undefined) {
            localVarQueryParameters['loan_currency'] = models_1.ObjectSerializer.serialize(opts.loanCurrency, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<CollateralLoanCurrency>', authSettings);
    }
}
exports.CollateralLoanApi = CollateralLoanApi;
