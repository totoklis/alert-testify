"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EarnUniApi = void 0;
const models_1 = require("../model/models");
const apiClient_1 = require("./apiClient");
class EarnUniApi {
    constructor(client) {
        if (client) {
            this.client = client;
        }
        else {
            this.client = new apiClient_1.ApiClient();
        }
    }
    async listUniCurrencies() {
        const localVarPath = this.client.basePath + '/earn/uni/currencies';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<UniCurrency>', authSettings);
    }
    async getUniCurrency(currency) {
        const localVarPath = this.client.basePath +
            '/earn/uni/currencies/{currency}'.replace('{' + 'currency' + '}', encodeURIComponent(String(currency)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getUniCurrency.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'UniCurrency', authSettings);
    }
    async listUserUniLends(opts) {
        const localVarPath = this.client.basePath + '/earn/uni/lends';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<UniLend>', authSettings);
    }
    async createUniLend(createUniLend) {
        const localVarPath = this.client.basePath + '/earn/uni/lends';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        if (createUniLend === null || createUniLend === undefined) {
            throw new Error('Required parameter createUniLend was null or undefined when calling createUniLend.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(createUniLend, 'CreateUniLend'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '', authSettings);
    }
    async changeUniLend(patchUniLend) {
        const localVarPath = this.client.basePath + '/earn/uni/lends';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        if (patchUniLend === null || patchUniLend === undefined) {
            throw new Error('Required parameter patchUniLend was null or undefined when calling changeUniLend.');
        }
        const config = {
            method: 'PATCH',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(patchUniLend, 'PatchUniLend'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '', authSettings);
    }
    async listUniLendRecords(opts) {
        const localVarPath = this.client.basePath + '/earn/uni/lend_records';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(opts.type, "'lend' | 'redeem'");
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<UniLendRecord>', authSettings);
    }
    async getUniInterest(currency) {
        const localVarPath = this.client.basePath +
            '/earn/uni/interests/{currency}'.replace('{' + 'currency' + '}', encodeURIComponent(String(currency)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getUniInterest.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'UniLendInterest', authSettings);
    }
    async listUniInterestRecords(opts) {
        const localVarPath = this.client.basePath + '/earn/uni/interest_records';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<UniInterestRecord>', authSettings);
    }
    async switchInterestReinvest(uniInterestMode) {
        const localVarPath = this.client.basePath + '/earn/uni/interest_reinvest';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        if (uniInterestMode === null || uniInterestMode === undefined) {
            throw new Error('Required parameter uniInterestMode was null or undefined when calling switchInterestReinvest.');
        }
        const config = {
            method: 'PUT',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(uniInterestMode, 'UniInterestMode'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '', authSettings);
    }
    async getUniInterestStatus(currency) {
        const localVarPath = this.client.basePath +
            '/earn/uni/interest_status/{currency}'.replace('{' + 'currency' + '}', encodeURIComponent(String(currency)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getUniInterestStatus.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'UniCurrencyInterest', authSettings);
    }
    async listUniChart(from, to, asset) {
        const localVarPath = this.client.basePath + '/earn/uni/chart';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling listUniChart.');
        }
        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling listUniChart.');
        }
        if (asset === null || asset === undefined) {
            throw new Error('Required parameter asset was null or undefined when calling listUniChart.');
        }
        localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(from, 'number');
        localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(to, 'number');
        localVarQueryParameters['asset'] = models_1.ObjectSerializer.serialize(asset, 'string');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<InlineResponse200>', authSettings);
    }
    async listUniRate() {
        const localVarPath = this.client.basePath + '/earn/uni/rate';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<InlineResponse2001>', authSettings);
    }
}
exports.EarnUniApi = EarnUniApi;
