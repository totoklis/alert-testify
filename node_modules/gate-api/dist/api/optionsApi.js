"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionsApi = void 0;
const models_1 = require("../model/models");
const apiClient_1 = require("./apiClient");
class OptionsApi {
    constructor(client) {
        if (client) {
            this.client = client;
        }
        else {
            this.client = new apiClient_1.ApiClient();
        }
    }
    async listOptionsUnderlyings() {
        const localVarPath = this.client.basePath + '/options/underlyings';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<OptionsUnderlying>', authSettings);
    }
    async listOptionsExpirations(underlying) {
        const localVarPath = this.client.basePath + '/options/expirations';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (underlying === null || underlying === undefined) {
            throw new Error('Required parameter underlying was null or undefined when calling listOptionsExpirations.');
        }
        localVarQueryParameters['underlying'] = models_1.ObjectSerializer.serialize(underlying, 'string');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<number>', authSettings);
    }
    async listOptionsContracts(underlying, opts) {
        const localVarPath = this.client.basePath + '/options/contracts';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (underlying === null || underlying === undefined) {
            throw new Error('Required parameter underlying was null or undefined when calling listOptionsContracts.');
        }
        opts = opts || {};
        localVarQueryParameters['underlying'] = models_1.ObjectSerializer.serialize(underlying, 'string');
        if (opts.expiration !== undefined) {
            localVarQueryParameters['expiration'] = models_1.ObjectSerializer.serialize(opts.expiration, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<OptionsContract>', authSettings);
    }
    async getOptionsContract(contract) {
        const localVarPath = this.client.basePath +
            '/options/contracts/{contract}'.replace('{' + 'contract' + '}', encodeURIComponent(String(contract)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling getOptionsContract.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'OptionsContract', authSettings);
    }
    async listOptionsSettlements(underlying, opts) {
        const localVarPath = this.client.basePath + '/options/settlements';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (underlying === null || underlying === undefined) {
            throw new Error('Required parameter underlying was null or undefined when calling listOptionsSettlements.');
        }
        opts = opts || {};
        localVarQueryParameters['underlying'] = models_1.ObjectSerializer.serialize(underlying, 'string');
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<OptionsSettlement>', authSettings);
    }
    async getOptionsSettlement(contract, underlying, at) {
        const localVarPath = this.client.basePath +
            '/options/settlements/{contract}'.replace('{' + 'contract' + '}', encodeURIComponent(String(contract)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling getOptionsSettlement.');
        }
        if (underlying === null || underlying === undefined) {
            throw new Error('Required parameter underlying was null or undefined when calling getOptionsSettlement.');
        }
        if (at === null || at === undefined) {
            throw new Error('Required parameter at was null or undefined when calling getOptionsSettlement.');
        }
        localVarQueryParameters['underlying'] = models_1.ObjectSerializer.serialize(underlying, 'string');
        localVarQueryParameters['at'] = models_1.ObjectSerializer.serialize(at, 'number');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'OptionsSettlement', authSettings);
    }
    async listMyOptionsSettlements(underlying, opts) {
        const localVarPath = this.client.basePath + '/options/my_settlements';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (underlying === null || underlying === undefined) {
            throw new Error('Required parameter underlying was null or undefined when calling listMyOptionsSettlements.');
        }
        opts = opts || {};
        localVarQueryParameters['underlying'] = models_1.ObjectSerializer.serialize(underlying, 'string');
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<OptionsMySettlements>', authSettings);
    }
    async listOptionsOrderBook(contract, opts) {
        const localVarPath = this.client.basePath + '/options/order_book';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling listOptionsOrderBook.');
        }
        opts = opts || {};
        localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(contract, 'string');
        if (opts.interval !== undefined) {
            localVarQueryParameters['interval'] = models_1.ObjectSerializer.serialize(opts.interval, "'0' | '0.1' | '0.01'");
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.withId !== undefined) {
            localVarQueryParameters['with_id'] = models_1.ObjectSerializer.serialize(opts.withId, 'boolean');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'FuturesOrderBook', authSettings);
    }
    async listOptionsTickers(underlying) {
        const localVarPath = this.client.basePath + '/options/tickers';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (underlying === null || underlying === undefined) {
            throw new Error('Required parameter underlying was null or undefined when calling listOptionsTickers.');
        }
        localVarQueryParameters['underlying'] = models_1.ObjectSerializer.serialize(underlying, 'string');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<OptionsTicker>', authSettings);
    }
    async listOptionsUnderlyingTickers(underlying) {
        const localVarPath = this.client.basePath +
            '/options/underlying/tickers/{underlying}'.replace('{' + 'underlying' + '}', encodeURIComponent(String(underlying)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (underlying === null || underlying === undefined) {
            throw new Error('Required parameter underlying was null or undefined when calling listOptionsUnderlyingTickers.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'OptionsUnderlyingTicker', authSettings);
    }
    async listOptionsCandlesticks(contract, opts) {
        const localVarPath = this.client.basePath + '/options/candlesticks';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling listOptionsCandlesticks.');
        }
        opts = opts || {};
        localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(contract, 'string');
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.interval !== undefined) {
            localVarQueryParameters['interval'] = models_1.ObjectSerializer.serialize(opts.interval, "'1m' | '5m' | '15m' | '30m' | '1h'");
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<OptionsCandlestick>', authSettings);
    }
    async listOptionsUnderlyingCandlesticks(underlying, opts) {
        const localVarPath = this.client.basePath + '/options/underlying/candlesticks';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (underlying === null || underlying === undefined) {
            throw new Error('Required parameter underlying was null or undefined when calling listOptionsUnderlyingCandlesticks.');
        }
        opts = opts || {};
        localVarQueryParameters['underlying'] = models_1.ObjectSerializer.serialize(underlying, 'string');
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.interval !== undefined) {
            localVarQueryParameters['interval'] = models_1.ObjectSerializer.serialize(opts.interval, "'1m' | '5m' | '15m' | '30m' | '1h'");
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<FuturesCandlestick>', authSettings);
    }
    async listOptionsTrades(opts) {
        const localVarPath = this.client.basePath + '/options/trades';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(opts.type, 'string');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<FuturesTrade>', authSettings);
    }
    async listOptionsAccount() {
        const localVarPath = this.client.basePath + '/options/accounts';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'OptionsAccount', authSettings);
    }
    async listOptionsAccountBook(opts) {
        const localVarPath = this.client.basePath + '/options/account_book';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(opts.type, "'dnw' | 'prem' | 'fee' | 'refr' | 'set'");
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<OptionsAccountBook>', authSettings);
    }
    async listOptionsPositions(opts) {
        const localVarPath = this.client.basePath + '/options/positions';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.underlying !== undefined) {
            localVarQueryParameters['underlying'] = models_1.ObjectSerializer.serialize(opts.underlying, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<OptionsPosition>', authSettings);
    }
    async getOptionsPosition(contract) {
        const localVarPath = this.client.basePath +
            '/options/positions/{contract}'.replace('{' + 'contract' + '}', encodeURIComponent(String(contract)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling getOptionsPosition.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'OptionsPosition', authSettings);
    }
    async listOptionsPositionClose(underlying, opts) {
        const localVarPath = this.client.basePath + '/options/position_close';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (underlying === null || underlying === undefined) {
            throw new Error('Required parameter underlying was null or undefined when calling listOptionsPositionClose.');
        }
        opts = opts || {};
        localVarQueryParameters['underlying'] = models_1.ObjectSerializer.serialize(underlying, 'string');
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<OptionsPositionClose>', authSettings);
    }
    async listOptionsOrders(status, opts) {
        const localVarPath = this.client.basePath + '/options/orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling listOptionsOrders.');
        }
        opts = opts || {};
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        if (opts.underlying !== undefined) {
            localVarQueryParameters['underlying'] = models_1.ObjectSerializer.serialize(opts.underlying, 'string');
        }
        localVarQueryParameters['status'] = models_1.ObjectSerializer.serialize(status, "'open' | 'finished'");
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<OptionsOrder>', authSettings);
    }
    async createOptionsOrder(optionsOrder) {
        const localVarPath = this.client.basePath + '/options/orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (optionsOrder === null || optionsOrder === undefined) {
            throw new Error('Required parameter optionsOrder was null or undefined when calling createOptionsOrder.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(optionsOrder, 'OptionsOrder'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'OptionsOrder', authSettings);
    }
    async cancelOptionsOrders(opts) {
        const localVarPath = this.client.basePath + '/options/orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        if (opts.underlying !== undefined) {
            localVarQueryParameters['underlying'] = models_1.ObjectSerializer.serialize(opts.underlying, 'string');
        }
        if (opts.side !== undefined) {
            localVarQueryParameters['side'] = models_1.ObjectSerializer.serialize(opts.side, "'ask' | 'bid'");
        }
        const config = {
            method: 'DELETE',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<OptionsOrder>', authSettings);
    }
    async getOptionsOrder(orderId) {
        const localVarPath = this.client.basePath +
            '/options/orders/{order_id}'.replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getOptionsOrder.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'OptionsOrder', authSettings);
    }
    async cancelOptionsOrder(orderId) {
        const localVarPath = this.client.basePath +
            '/options/orders/{order_id}'.replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling cancelOptionsOrder.');
        }
        const config = {
            method: 'DELETE',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'OptionsOrder', authSettings);
    }
    async countdownCancelAllOptions(countdownCancelAllOptionsTask) {
        const localVarPath = this.client.basePath + '/options/countdown_cancel_all';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (countdownCancelAllOptionsTask === null || countdownCancelAllOptionsTask === undefined) {
            throw new Error('Required parameter countdownCancelAllOptionsTask was null or undefined when calling countdownCancelAllOptions.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(countdownCancelAllOptionsTask, 'CountdownCancelAllOptionsTask'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'TriggerTime', authSettings);
    }
    async listMyOptionsTrades(underlying, opts) {
        const localVarPath = this.client.basePath + '/options/my_trades';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (underlying === null || underlying === undefined) {
            throw new Error('Required parameter underlying was null or undefined when calling listMyOptionsTrades.');
        }
        opts = opts || {};
        localVarQueryParameters['underlying'] = models_1.ObjectSerializer.serialize(underlying, 'string');
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<OptionsMyTrade>', authSettings);
    }
    async getOptionsMMP(opts) {
        const localVarPath = this.client.basePath + '/options/mmp';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.underlying !== undefined) {
            localVarQueryParameters['underlying'] = models_1.ObjectSerializer.serialize(opts.underlying, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<OptionsMMP>', authSettings);
    }
    async setOptionsMMP(optionsMMP) {
        const localVarPath = this.client.basePath + '/options/mmp';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (optionsMMP === null || optionsMMP === undefined) {
            throw new Error('Required parameter optionsMMP was null or undefined when calling setOptionsMMP.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(optionsMMP, 'OptionsMMP'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'OptionsMMP', authSettings);
    }
    async resetOptionsMMP(optionsMMPReset) {
        const localVarPath = this.client.basePath + '/options/mmp/reset';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (optionsMMPReset === null || optionsMMPReset === undefined) {
            throw new Error('Required parameter optionsMMPReset was null or undefined when calling resetOptionsMMP.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(optionsMMPReset, 'OptionsMMPReset'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'OptionsMMP', authSettings);
    }
}
exports.OptionsApi = OptionsApi;
