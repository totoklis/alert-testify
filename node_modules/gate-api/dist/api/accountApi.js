"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountApi = void 0;
const models_1 = require("../model/models");
const apiClient_1 = require("./apiClient");
class AccountApi {
    constructor(client) {
        if (client) {
            this.client = client;
        }
        else {
            this.client = new apiClient_1.ApiClient();
        }
    }
    async getAccountDetail() {
        const localVarPath = this.client.basePath + '/account/detail';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'AccountDetail', authSettings);
    }
    async getAccountRateLimit() {
        const localVarPath = this.client.basePath + '/account/rate_limit';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<AccountRateLimit>', authSettings);
    }
    async listSTPGroups(opts) {
        const localVarPath = this.client.basePath + '/account/stp_groups';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.name !== undefined) {
            localVarQueryParameters['name'] = models_1.ObjectSerializer.serialize(opts.name, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<StpGroup>', authSettings);
    }
    async createSTPGroup(stpGroup) {
        const localVarPath = this.client.basePath + '/account/stp_groups';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (stpGroup === null || stpGroup === undefined) {
            throw new Error('Required parameter stpGroup was null or undefined when calling createSTPGroup.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(stpGroup, 'StpGroup'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'StpGroup', authSettings);
    }
    async listSTPGroupsUsers(stpId) {
        const localVarPath = this.client.basePath +
            '/account/stp_groups/{stp_id}/users'.replace('{' + 'stp_id' + '}', encodeURIComponent(String(stpId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (stpId === null || stpId === undefined) {
            throw new Error('Required parameter stpId was null or undefined when calling listSTPGroupsUsers.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<StpGroupUser>', authSettings);
    }
    async addSTPGroupUsers(stpId, requestBody) {
        const localVarPath = this.client.basePath +
            '/account/stp_groups/{stp_id}/users'.replace('{' + 'stp_id' + '}', encodeURIComponent(String(stpId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (stpId === null || stpId === undefined) {
            throw new Error('Required parameter stpId was null or undefined when calling addSTPGroupUsers.');
        }
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling addSTPGroupUsers.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(requestBody, 'Array<number>'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<StpGroupUser>', authSettings);
    }
    async deleteSTPGroupUsers(stpId, userId) {
        const localVarPath = this.client.basePath +
            '/account/stp_groups/{stp_id}/users'.replace('{' + 'stp_id' + '}', encodeURIComponent(String(stpId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (stpId === null || stpId === undefined) {
            throw new Error('Required parameter stpId was null or undefined when calling deleteSTPGroupUsers.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteSTPGroupUsers.');
        }
        localVarQueryParameters['user_id'] = models_1.ObjectSerializer.serialize(userId, 'number');
        const config = {
            method: 'DELETE',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<StpGroupUser>', authSettings);
    }
    async getDebitFee() {
        const localVarPath = this.client.basePath + '/account/debit_fee';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'DebitFee', authSettings);
    }
    async setDebitFee(debitFee) {
        const localVarPath = this.client.basePath + '/account/debit_fee';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        if (debitFee === null || debitFee === undefined) {
            throw new Error('Required parameter debitFee was null or undefined when calling setDebitFee.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(debitFee, 'DebitFee'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '', authSettings);
    }
}
exports.AccountApi = AccountApi;
