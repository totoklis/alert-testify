import { AutoRepaySetting } from '../model/autoRepaySetting';
import { CrossMarginAccount } from '../model/crossMarginAccount';
import { CrossMarginAccountBook } from '../model/crossMarginAccountBook';
import { CrossMarginCurrency } from '../model/crossMarginCurrency';
import { CrossMarginLoan } from '../model/crossMarginLoan';
import { CrossMarginRepayRequest } from '../model/crossMarginRepayRequest';
import { CrossMarginRepayment } from '../model/crossMarginRepayment';
import { CrossMarginTransferable } from '../model/crossMarginTransferable';
import { FundingAccount } from '../model/fundingAccount';
import { MarginAccount } from '../model/marginAccount';
import { MarginAccountBook } from '../model/marginAccountBook';
import { MarginLeverageTier } from '../model/marginLeverageTier';
import { MarginMarketLeverage } from '../model/marginMarketLeverage';
import { MarginTransferable } from '../model/marginTransferable';
import { UniLoanInterestRecord } from '../model/uniLoanInterestRecord';
import { UnifiedBorrowable } from '../model/unifiedBorrowable';
import { ApiClient } from './apiClient';
import { AxiosResponse } from 'axios';
export declare class MarginApi {
    protected client: ApiClient;
    constructor(client?: ApiClient);
    listMarginAccounts(opts: {
        currencyPair?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<MarginAccount>;
    }>;
    listMarginAccountBook(opts: {
        currency?: string;
        currencyPair?: string;
        type?: string;
        from?: number;
        to?: number;
        page?: number;
        limit?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<MarginAccountBook>;
    }>;
    listFundingAccounts(opts: {
        currency?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FundingAccount>;
    }>;
    getAutoRepayStatus(): Promise<{
        response: AxiosResponse;
        body: AutoRepaySetting;
    }>;
    setAutoRepay(status: string): Promise<{
        response: AxiosResponse;
        body: AutoRepaySetting;
    }>;
    getMarginTransferable(currency: string, opts: {
        currencyPair?: string;
    }): Promise<{
        response: AxiosResponse;
        body: MarginTransferable;
    }>;
    listCrossMarginCurrencies(): Promise<{
        response: AxiosResponse;
        body: Array<CrossMarginCurrency>;
    }>;
    getCrossMarginCurrency(currency: string): Promise<{
        response: AxiosResponse;
        body: CrossMarginCurrency;
    }>;
    getCrossMarginAccount(): Promise<{
        response: AxiosResponse;
        body: CrossMarginAccount;
    }>;
    listCrossMarginAccountBook(opts: {
        currency?: string;
        from?: number;
        to?: number;
        page?: number;
        limit?: number;
        type?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<CrossMarginAccountBook>;
    }>;
    listCrossMarginLoans(status: number, opts: {
        currency?: string;
        limit?: number;
        offset?: number;
        reverse?: boolean;
    }): Promise<{
        response: AxiosResponse;
        body: Array<CrossMarginLoan>;
    }>;
    createCrossMarginLoan(crossMarginLoan: CrossMarginLoan): Promise<{
        response: AxiosResponse;
        body: CrossMarginLoan;
    }>;
    getCrossMarginLoan(loanId: string): Promise<{
        response: AxiosResponse;
        body: CrossMarginLoan;
    }>;
    listCrossMarginRepayments(opts: {
        currency?: string;
        loanId?: string;
        limit?: number;
        offset?: number;
        reverse?: boolean;
    }): Promise<{
        response: AxiosResponse;
        body: Array<CrossMarginRepayment>;
    }>;
    repayCrossMarginLoan(crossMarginRepayRequest: CrossMarginRepayRequest): Promise<{
        response: AxiosResponse;
        body: Array<CrossMarginLoan>;
    }>;
    getCrossMarginInterestRecords(opts: {
        currency?: string;
        page?: number;
        limit?: number;
        from?: number;
        to?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<UniLoanInterestRecord>;
    }>;
    getCrossMarginTransferable(currency: string): Promise<{
        response: AxiosResponse;
        body: CrossMarginTransferable;
    }>;
    getCrossMarginEstimateRate(currencies: Array<string>): Promise<{
        response: AxiosResponse;
        body: {
            [key: string]: string;
        };
    }>;
    getCrossMarginBorrowable(currency: string): Promise<{
        response: AxiosResponse;
        body: UnifiedBorrowable;
    }>;
    getUserMarginTier(currencyPair: string): Promise<{
        response: AxiosResponse;
        body: Array<MarginLeverageTier>;
    }>;
    getMarketMarginTier(currencyPair: string): Promise<{
        response: AxiosResponse;
        body: Array<MarginLeverageTier>;
    }>;
    setUserMarketLeverage(marginMarketLeverage: MarginMarketLeverage): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    listMarginUserAccount(opts: {
        currencyPair?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<MarginAccount>;
    }>;
}
