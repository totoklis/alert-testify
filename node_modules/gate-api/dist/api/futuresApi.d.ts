import { BatchAmendOrderReq } from '../model/batchAmendOrderReq';
import { BatchFuturesOrder } from '../model/batchFuturesOrder';
import { Contract } from '../model/contract';
import { ContractStat } from '../model/contractStat';
import { CountdownCancelAllFuturesTask } from '../model/countdownCancelAllFuturesTask';
import { FundingRateRecord } from '../model/fundingRateRecord';
import { FutureCancelOrderResult } from '../model/futureCancelOrderResult';
import { FuturesAccount } from '../model/futuresAccount';
import { FuturesAccountBook } from '../model/futuresAccountBook';
import { FuturesAutoDeleverage } from '../model/futuresAutoDeleverage';
import { FuturesCandlestick } from '../model/futuresCandlestick';
import { FuturesFee } from '../model/futuresFee';
import { FuturesIndexConstituents } from '../model/futuresIndexConstituents';
import { FuturesLimitRiskTiers } from '../model/futuresLimitRiskTiers';
import { FuturesLiqOrder } from '../model/futuresLiqOrder';
import { FuturesLiquidate } from '../model/futuresLiquidate';
import { FuturesOrder } from '../model/futuresOrder';
import { FuturesOrderAmendment } from '../model/futuresOrderAmendment';
import { FuturesOrderBook } from '../model/futuresOrderBook';
import { FuturesPremiumIndex } from '../model/futuresPremiumIndex';
import { FuturesPriceTriggeredOrder } from '../model/futuresPriceTriggeredOrder';
import { FuturesTicker } from '../model/futuresTicker';
import { FuturesTrade } from '../model/futuresTrade';
import { InlineObject } from '../model/inlineObject';
import { InsuranceRecord } from '../model/insuranceRecord';
import { MyFuturesTrade } from '../model/myFuturesTrade';
import { MyFuturesTradeTimeRange } from '../model/myFuturesTradeTimeRange';
import { Position } from '../model/position';
import { PositionClose } from '../model/positionClose';
import { TriggerOrderResponse } from '../model/triggerOrderResponse';
import { TriggerTime } from '../model/triggerTime';
import { ApiClient } from './apiClient';
import { AxiosResponse } from 'axios';
export declare class FuturesApi {
    protected client: ApiClient;
    constructor(client?: ApiClient);
    listFuturesContracts(settle: 'btc' | 'usdt', opts: {
        limit?: number;
        offset?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<Contract>;
    }>;
    getFuturesContract(settle: 'btc' | 'usdt', contract: string): Promise<{
        response: AxiosResponse;
        body: Contract;
    }>;
    listFuturesOrderBook(settle: 'btc' | 'usdt', contract: string, opts: {
        interval?: string;
        limit?: number;
        withId?: boolean;
    }): Promise<{
        response: AxiosResponse;
        body: FuturesOrderBook;
    }>;
    listFuturesTrades(settle: 'btc' | 'usdt', contract: string, opts: {
        limit?: number;
        offset?: number;
        lastId?: string;
        from?: number;
        to?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FuturesTrade>;
    }>;
    listFuturesCandlesticks(settle: 'btc' | 'usdt', contract: string, opts: {
        from?: number;
        to?: number;
        limit?: number;
        interval?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FuturesCandlestick>;
    }>;
    listFuturesPremiumIndex(settle: 'btc' | 'usdt', contract: string, opts: {
        from?: number;
        to?: number;
        limit?: number;
        interval?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FuturesPremiumIndex>;
    }>;
    listFuturesTickers(settle: 'btc' | 'usdt', opts: {
        contract?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FuturesTicker>;
    }>;
    listFuturesFundingRateHistory(settle: 'btc' | 'usdt', contract: string, opts: {
        limit?: number;
        from?: number;
        to?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FundingRateRecord>;
    }>;
    listFuturesInsuranceLedger(settle: 'btc' | 'usdt', opts: {
        limit?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<InsuranceRecord>;
    }>;
    listContractStats(settle: 'btc' | 'usdt', contract: string, opts: {
        from?: number;
        interval?: string;
        limit?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<ContractStat>;
    }>;
    getIndexConstituents(settle: 'btc' | 'usdt', index: string): Promise<{
        response: AxiosResponse;
        body: FuturesIndexConstituents;
    }>;
    listLiquidatedOrders(settle: 'btc' | 'usdt', opts: {
        contract?: string;
        from?: number;
        to?: number;
        limit?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FuturesLiqOrder>;
    }>;
    listFuturesRiskLimitTiers(settle: 'btc' | 'usdt', opts: {
        contract?: string;
        limit?: number;
        offset?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FuturesLimitRiskTiers>;
    }>;
    listFuturesAccounts(settle: 'btc' | 'usdt'): Promise<{
        response: AxiosResponse;
        body: FuturesAccount;
    }>;
    listFuturesAccountBook(settle: 'btc' | 'usdt', opts: {
        contract?: string;
        limit?: number;
        offset?: number;
        from?: number;
        to?: number;
        type?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FuturesAccountBook>;
    }>;
    listPositions(settle: 'btc' | 'usdt', opts: {
        holding?: boolean;
        limit?: number;
        offset?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<Position>;
    }>;
    getPosition(settle: 'btc' | 'usdt', contract: string): Promise<{
        response: AxiosResponse;
        body: Position;
    }>;
    updatePositionMargin(settle: 'btc' | 'usdt', contract: string, change: string): Promise<{
        response: AxiosResponse;
        body: Position;
    }>;
    updatePositionLeverage(settle: 'btc' | 'usdt', contract: string, leverage: string, opts: {
        crossLeverageLimit?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Position;
    }>;
    updatePositionCrossMode(settle: 'btc' | 'usdt', inlineObject: InlineObject): Promise<{
        response: AxiosResponse;
        body: Position;
    }>;
    updatePositionRiskLimit(settle: 'btc' | 'usdt', contract: string, riskLimit: string): Promise<{
        response: AxiosResponse;
        body: Position;
    }>;
    setDualMode(settle: 'btc' | 'usdt', dualMode: boolean): Promise<{
        response: AxiosResponse;
        body: FuturesAccount;
    }>;
    getDualModePosition(settle: 'btc' | 'usdt', contract: string): Promise<{
        response: AxiosResponse;
        body: Array<Position>;
    }>;
    updateDualModePositionMargin(settle: 'btc' | 'usdt', contract: string, change: string, dualSide: string): Promise<{
        response: AxiosResponse;
        body: Array<Position>;
    }>;
    updateDualModePositionLeverage(settle: 'btc' | 'usdt', contract: string, leverage: string, opts: {
        crossLeverageLimit?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<Position>;
    }>;
    updateDualModePositionRiskLimit(settle: 'btc' | 'usdt', contract: string, riskLimit: string): Promise<{
        response: AxiosResponse;
        body: Array<Position>;
    }>;
    listFuturesOrders(settle: 'btc' | 'usdt', status: string, opts: {
        contract?: string;
        limit?: number;
        offset?: number;
        lastId?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FuturesOrder>;
    }>;
    createFuturesOrder(settle: 'btc' | 'usdt', futuresOrder: FuturesOrder, opts: {
        xGateExptime?: string;
    }): Promise<{
        response: AxiosResponse;
        body: FuturesOrder;
    }>;
    cancelFuturesOrders(settle: 'btc' | 'usdt', contract: string, opts: {
        xGateExptime?: string;
        side?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FuturesOrder>;
    }>;
    getOrdersWithTimeRange(settle: 'btc' | 'usdt', opts: {
        contract?: string;
        from?: number;
        to?: number;
        limit?: number;
        offset?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FuturesOrder>;
    }>;
    createBatchFuturesOrder(settle: 'btc' | 'usdt', futuresOrder: Array<FuturesOrder>, opts: {
        xGateExptime?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<BatchFuturesOrder>;
    }>;
    getFuturesOrder(settle: 'btc' | 'usdt', orderId: string): Promise<{
        response: AxiosResponse;
        body: FuturesOrder;
    }>;
    amendFuturesOrder(settle: 'btc' | 'usdt', orderId: string, futuresOrderAmendment: FuturesOrderAmendment, opts: {
        xGateExptime?: string;
    }): Promise<{
        response: AxiosResponse;
        body: FuturesOrder;
    }>;
    cancelFuturesOrder(settle: 'btc' | 'usdt', orderId: string, opts: {
        xGateExptime?: string;
    }): Promise<{
        response: AxiosResponse;
        body: FuturesOrder;
    }>;
    getMyTrades(settle: 'btc' | 'usdt', opts: {
        contract?: string;
        order?: number;
        limit?: number;
        offset?: number;
        lastId?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<MyFuturesTrade>;
    }>;
    getMyTradesWithTimeRange(settle: 'btc' | 'usdt', opts: {
        contract?: string;
        from?: number;
        to?: number;
        limit?: number;
        offset?: number;
        role?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<MyFuturesTradeTimeRange>;
    }>;
    listPositionClose(settle: 'btc' | 'usdt', opts: {
        contract?: string;
        limit?: number;
        offset?: number;
        from?: number;
        to?: number;
        side?: string;
        pnl?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<PositionClose>;
    }>;
    listLiquidates(settle: 'btc' | 'usdt', opts: {
        contract?: string;
        limit?: number;
        at?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FuturesLiquidate>;
    }>;
    listAutoDeleverages(settle: 'btc' | 'usdt', opts: {
        contract?: string;
        limit?: number;
        at?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FuturesAutoDeleverage>;
    }>;
    countdownCancelAllFutures(settle: 'btc' | 'usdt', countdownCancelAllFuturesTask: CountdownCancelAllFuturesTask): Promise<{
        response: AxiosResponse;
        body: TriggerTime;
    }>;
    getFuturesFee(settle: 'btc' | 'usdt', opts: {
        contract?: string;
    }): Promise<{
        response: AxiosResponse;
        body: {
            [key: string]: FuturesFee;
        };
    }>;
    cancelBatchFutureOrders(settle: 'btc' | 'usdt', requestBody: Array<string>, opts: {
        xGateExptime?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FutureCancelOrderResult>;
    }>;
    amendBatchFutureOrders(settle: 'btc' | 'usdt', batchAmendOrderReq: Array<BatchAmendOrderReq>, opts: {
        xGateExptime?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<BatchFuturesOrder>;
    }>;
    listPriceTriggeredOrders(settle: 'btc' | 'usdt', status: 'open' | 'finished', opts: {
        contract?: string;
        limit?: number;
        offset?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FuturesPriceTriggeredOrder>;
    }>;
    createPriceTriggeredOrder(settle: 'btc' | 'usdt', futuresPriceTriggeredOrder: FuturesPriceTriggeredOrder): Promise<{
        response: AxiosResponse;
        body: TriggerOrderResponse;
    }>;
    cancelPriceTriggeredOrderList(settle: 'btc' | 'usdt', opts: {
        contract?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FuturesPriceTriggeredOrder>;
    }>;
    getPriceTriggeredOrder(settle: 'btc' | 'usdt', orderId: string): Promise<{
        response: AxiosResponse;
        body: FuturesPriceTriggeredOrder;
    }>;
    cancelPriceTriggeredOrder(settle: 'btc' | 'usdt', orderId: string): Promise<{
        response: AxiosResponse;
        body: FuturesPriceTriggeredOrder;
    }>;
}
