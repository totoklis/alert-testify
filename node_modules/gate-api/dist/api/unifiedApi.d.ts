import { TransferablesResult } from '../model/transferablesResult';
import { UniLoan } from '../model/uniLoan';
import { UniLoanInterestRecord } from '../model/uniLoanInterestRecord';
import { UnifiedAccount } from '../model/unifiedAccount';
import { UnifiedBorrowable } from '../model/unifiedBorrowable';
import { UnifiedBorrowable1 } from '../model/unifiedBorrowable1';
import { UnifiedCurrency } from '../model/unifiedCurrency';
import { UnifiedDiscount } from '../model/unifiedDiscount';
import { UnifiedHistoryLoanRate } from '../model/unifiedHistoryLoanRate';
import { UnifiedLeverageConfig } from '../model/unifiedLeverageConfig';
import { UnifiedLeverageSetting } from '../model/unifiedLeverageSetting';
import { UnifiedLoan } from '../model/unifiedLoan';
import { UnifiedLoanRecord } from '../model/unifiedLoanRecord';
import { UnifiedLoanResult } from '../model/unifiedLoanResult';
import { UnifiedMarginTiers } from '../model/unifiedMarginTiers';
import { UnifiedModeSet } from '../model/unifiedModeSet';
import { UnifiedPortfolioInput } from '../model/unifiedPortfolioInput';
import { UnifiedPortfolioOutput } from '../model/unifiedPortfolioOutput';
import { UnifiedRiskUnits } from '../model/unifiedRiskUnits';
import { UnifiedTransferable } from '../model/unifiedTransferable';
import { ApiClient } from './apiClient';
import { AxiosResponse } from 'axios';
export declare class UnifiedApi {
    protected client: ApiClient;
    constructor(client?: ApiClient);
    listUnifiedAccounts(opts: {
        currency?: string;
        subUid?: string;
    }): Promise<{
        response: AxiosResponse;
        body: UnifiedAccount;
    }>;
    getUnifiedBorrowable(currency: string): Promise<{
        response: AxiosResponse;
        body: UnifiedBorrowable;
    }>;
    getUnifiedTransferable(currency: string): Promise<{
        response: AxiosResponse;
        body: UnifiedTransferable;
    }>;
    getUnifiedTransferables(currencies: string): Promise<{
        response: AxiosResponse;
        body: Array<TransferablesResult>;
    }>;
    getUnifiedBorrowableList(currencies: Array<string>): Promise<{
        response: AxiosResponse;
        body: Array<UnifiedBorrowable1>;
    }>;
    listUnifiedLoans(opts: {
        currency?: string;
        page?: number;
        limit?: number;
        type?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<UniLoan>;
    }>;
    createUnifiedLoan(unifiedLoan: UnifiedLoan): Promise<{
        response: AxiosResponse;
        body: UnifiedLoanResult;
    }>;
    listUnifiedLoanRecords(opts: {
        type?: string;
        currency?: string;
        page?: number;
        limit?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<UnifiedLoanRecord>;
    }>;
    listUnifiedLoanInterestRecords(opts: {
        currency?: string;
        page?: number;
        limit?: number;
        from?: number;
        to?: number;
        type?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<UniLoanInterestRecord>;
    }>;
    getUnifiedRiskUnits(): Promise<{
        response: AxiosResponse;
        body: UnifiedRiskUnits;
    }>;
    getUnifiedMode(): Promise<{
        response: AxiosResponse;
        body: UnifiedModeSet;
    }>;
    setUnifiedMode(unifiedModeSet: UnifiedModeSet): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    getUnifiedEstimateRate(currencies: Array<string>): Promise<{
        response: AxiosResponse;
        body: {
            [key: string]: string;
        };
    }>;
    listCurrencyDiscountTiers(): Promise<{
        response: AxiosResponse;
        body: Array<UnifiedDiscount>;
    }>;
    listLoanMarginTiers(): Promise<{
        response: AxiosResponse;
        body: Array<UnifiedMarginTiers>;
    }>;
    calculatePortfolioMargin(unifiedPortfolioInput: UnifiedPortfolioInput): Promise<{
        response: AxiosResponse;
        body: UnifiedPortfolioOutput;
    }>;
    getUserLeverageCurrencyConfig(currency: string): Promise<{
        response: AxiosResponse;
        body: UnifiedLeverageConfig;
    }>;
    getUserLeverageCurrencySetting(opts: {
        currency?: string;
    }): Promise<{
        response: AxiosResponse;
        body: UnifiedLeverageSetting;
    }>;
    setUserLeverageCurrencySetting(unifiedLeverageSetting: UnifiedLeverageSetting): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    listUnifiedCurrencies(opts: {
        currency?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<UnifiedCurrency>;
    }>;
    getHistoryLoanRate(currency: string, opts: {
        tier?: string;
        page?: number;
        limit?: number;
    }): Promise<{
        response: AxiosResponse;
        body: UnifiedHistoryLoanRate;
    }>;
}
