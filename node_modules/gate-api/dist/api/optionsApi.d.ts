import { CountdownCancelAllOptionsTask } from '../model/countdownCancelAllOptionsTask';
import { FuturesCandlestick } from '../model/futuresCandlestick';
import { FuturesOrderBook } from '../model/futuresOrderBook';
import { FuturesTrade } from '../model/futuresTrade';
import { OptionsAccount } from '../model/optionsAccount';
import { OptionsAccountBook } from '../model/optionsAccountBook';
import { OptionsCandlestick } from '../model/optionsCandlestick';
import { OptionsContract } from '../model/optionsContract';
import { OptionsMMP } from '../model/optionsMMP';
import { OptionsMMPReset } from '../model/optionsMMPReset';
import { OptionsMySettlements } from '../model/optionsMySettlements';
import { OptionsMyTrade } from '../model/optionsMyTrade';
import { OptionsOrder } from '../model/optionsOrder';
import { OptionsPosition } from '../model/optionsPosition';
import { OptionsPositionClose } from '../model/optionsPositionClose';
import { OptionsSettlement } from '../model/optionsSettlement';
import { OptionsTicker } from '../model/optionsTicker';
import { OptionsUnderlying } from '../model/optionsUnderlying';
import { OptionsUnderlyingTicker } from '../model/optionsUnderlyingTicker';
import { TriggerTime } from '../model/triggerTime';
import { ApiClient } from './apiClient';
import { AxiosResponse } from 'axios';
export declare class OptionsApi {
    protected client: ApiClient;
    constructor(client?: ApiClient);
    listOptionsUnderlyings(): Promise<{
        response: AxiosResponse;
        body: Array<OptionsUnderlying>;
    }>;
    listOptionsExpirations(underlying: string): Promise<{
        response: AxiosResponse;
        body: Array<number>;
    }>;
    listOptionsContracts(underlying: string, opts: {
        expiration?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<OptionsContract>;
    }>;
    getOptionsContract(contract: string): Promise<{
        response: AxiosResponse;
        body: OptionsContract;
    }>;
    listOptionsSettlements(underlying: string, opts: {
        limit?: number;
        offset?: number;
        from?: number;
        to?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<OptionsSettlement>;
    }>;
    getOptionsSettlement(contract: string, underlying: string, at: number): Promise<{
        response: AxiosResponse;
        body: OptionsSettlement;
    }>;
    listMyOptionsSettlements(underlying: string, opts: {
        contract?: string;
        limit?: number;
        offset?: number;
        from?: number;
        to?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<OptionsMySettlements>;
    }>;
    listOptionsOrderBook(contract: string, opts: {
        interval?: '0' | '0.1' | '0.01';
        limit?: number;
        withId?: boolean;
    }): Promise<{
        response: AxiosResponse;
        body: FuturesOrderBook;
    }>;
    listOptionsTickers(underlying: string): Promise<{
        response: AxiosResponse;
        body: Array<OptionsTicker>;
    }>;
    listOptionsUnderlyingTickers(underlying: string): Promise<{
        response: AxiosResponse;
        body: OptionsUnderlyingTicker;
    }>;
    listOptionsCandlesticks(contract: string, opts: {
        limit?: number;
        from?: number;
        to?: number;
        interval?: '1m' | '5m' | '15m' | '30m' | '1h';
    }): Promise<{
        response: AxiosResponse;
        body: Array<OptionsCandlestick>;
    }>;
    listOptionsUnderlyingCandlesticks(underlying: string, opts: {
        limit?: number;
        from?: number;
        to?: number;
        interval?: '1m' | '5m' | '15m' | '30m' | '1h';
    }): Promise<{
        response: AxiosResponse;
        body: Array<FuturesCandlestick>;
    }>;
    listOptionsTrades(opts: {
        contract?: string;
        type?: string;
        limit?: number;
        offset?: number;
        from?: number;
        to?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<FuturesTrade>;
    }>;
    listOptionsAccount(): Promise<{
        response: AxiosResponse;
        body: OptionsAccount;
    }>;
    listOptionsAccountBook(opts: {
        limit?: number;
        offset?: number;
        from?: number;
        to?: number;
        type?: 'dnw' | 'prem' | 'fee' | 'refr' | 'set';
    }): Promise<{
        response: AxiosResponse;
        body: Array<OptionsAccountBook>;
    }>;
    listOptionsPositions(opts: {
        underlying?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<OptionsPosition>;
    }>;
    getOptionsPosition(contract: string): Promise<{
        response: AxiosResponse;
        body: OptionsPosition;
    }>;
    listOptionsPositionClose(underlying: string, opts: {
        contract?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<OptionsPositionClose>;
    }>;
    listOptionsOrders(status: 'open' | 'finished', opts: {
        contract?: string;
        underlying?: string;
        limit?: number;
        offset?: number;
        from?: number;
        to?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<OptionsOrder>;
    }>;
    createOptionsOrder(optionsOrder: OptionsOrder): Promise<{
        response: AxiosResponse;
        body: OptionsOrder;
    }>;
    cancelOptionsOrders(opts: {
        contract?: string;
        underlying?: string;
        side?: 'ask' | 'bid';
    }): Promise<{
        response: AxiosResponse;
        body: Array<OptionsOrder>;
    }>;
    getOptionsOrder(orderId: number): Promise<{
        response: AxiosResponse;
        body: OptionsOrder;
    }>;
    cancelOptionsOrder(orderId: number): Promise<{
        response: AxiosResponse;
        body: OptionsOrder;
    }>;
    countdownCancelAllOptions(countdownCancelAllOptionsTask: CountdownCancelAllOptionsTask): Promise<{
        response: AxiosResponse;
        body: TriggerTime;
    }>;
    listMyOptionsTrades(underlying: string, opts: {
        contract?: string;
        limit?: number;
        offset?: number;
        from?: number;
        to?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<OptionsMyTrade>;
    }>;
    getOptionsMMP(opts: {
        underlying?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<OptionsMMP>;
    }>;
    setOptionsMMP(optionsMMP: OptionsMMP): Promise<{
        response: AxiosResponse;
        body: OptionsMMP;
    }>;
    resetOptionsMMP(optionsMMPReset: OptionsMMPReset): Promise<{
        response: AxiosResponse;
        body: OptionsMMP;
    }>;
}
