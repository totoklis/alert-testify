"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiCollateralLoanApi = void 0;
const models_1 = require("../model/models");
const apiClient_1 = require("./apiClient");
class MultiCollateralLoanApi {
    constructor(client) {
        if (client) {
            this.client = client;
        }
        else {
            this.client = new apiClient_1.ApiClient();
        }
    }
    async listMultiCollateralOrders(opts) {
        const localVarPath = this.client.basePath + '/loan/multi_collateral/orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.sort !== undefined) {
            localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(opts.sort, 'string');
        }
        if (opts.orderType !== undefined) {
            localVarQueryParameters['order_type'] = models_1.ObjectSerializer.serialize(opts.orderType, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<MultiCollateralOrder>', authSettings);
    }
    async createMultiCollateral(createMultiCollateralOrder) {
        const localVarPath = this.client.basePath + '/loan/multi_collateral/orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (createMultiCollateralOrder === null || createMultiCollateralOrder === undefined) {
            throw new Error('Required parameter createMultiCollateralOrder was null or undefined when calling createMultiCollateral.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(createMultiCollateralOrder, 'CreateMultiCollateralOrder'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'OrderResp', authSettings);
    }
    async getMultiCollateralOrderDetail(orderId) {
        const localVarPath = this.client.basePath +
            '/loan/multi_collateral/orders/{order_id}'.replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getMultiCollateralOrderDetail.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'MultiCollateralOrder', authSettings);
    }
    async listMultiRepayRecords(type, opts) {
        const localVarPath = this.client.basePath + '/loan/multi_collateral/repay';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling listMultiRepayRecords.');
        }
        opts = opts || {};
        localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(type, 'string');
        if (opts.borrowCurrency !== undefined) {
            localVarQueryParameters['borrow_currency'] = models_1.ObjectSerializer.serialize(opts.borrowCurrency, 'string');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<MultiRepayRecord>', authSettings);
    }
    async repayMultiCollateralLoan(repayMultiLoan) {
        const localVarPath = this.client.basePath + '/loan/multi_collateral/repay';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (repayMultiLoan === null || repayMultiLoan === undefined) {
            throw new Error('Required parameter repayMultiLoan was null or undefined when calling repayMultiCollateralLoan.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(repayMultiLoan, 'RepayMultiLoan'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'MultiRepayResp', authSettings);
    }
    async listMultiCollateralRecords(opts) {
        const localVarPath = this.client.basePath + '/loan/multi_collateral/mortgage';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.collateralCurrency !== undefined) {
            localVarQueryParameters['collateral_currency'] = models_1.ObjectSerializer.serialize(opts.collateralCurrency, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<MultiCollateralRecord>', authSettings);
    }
    async operateMultiCollateral(collateralAdjust) {
        const localVarPath = this.client.basePath + '/loan/multi_collateral/mortgage';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (collateralAdjust === null || collateralAdjust === undefined) {
            throw new Error('Required parameter collateralAdjust was null or undefined when calling operateMultiCollateral.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(collateralAdjust, 'CollateralAdjust'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'CollateralAdjustRes', authSettings);
    }
    async listUserCurrencyQuota(type, currency) {
        const localVarPath = this.client.basePath + '/loan/multi_collateral/currency_quota';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling listUserCurrencyQuota.');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling listUserCurrencyQuota.');
        }
        localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(type, 'string');
        localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(currency, 'string');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<CurrencyQuota>', authSettings);
    }
    async listMultiCollateralCurrencies() {
        const localVarPath = this.client.basePath + '/loan/multi_collateral/currencies';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'MultiCollateralCurrency', authSettings);
    }
    async getMultiCollateralLtv() {
        const localVarPath = this.client.basePath + '/loan/multi_collateral/ltv';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'CollateralLtv', authSettings);
    }
    async getMultiCollateralFixRate() {
        const localVarPath = this.client.basePath + '/loan/multi_collateral/fixed_rate';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<CollateralFixRate>', authSettings);
    }
    async getMultiCollateralCurrentRate(currencies, opts) {
        const localVarPath = this.client.basePath + '/loan/multi_collateral/current_rate';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currencies === null || currencies === undefined) {
            throw new Error('Required parameter currencies was null or undefined when calling getMultiCollateralCurrentRate.');
        }
        opts = opts || {};
        localVarQueryParameters['currencies'] = models_1.ObjectSerializer.serialize(currencies, 'Array<string>');
        if (opts.vipLevel !== undefined) {
            localVarQueryParameters['vip_level'] = models_1.ObjectSerializer.serialize(opts.vipLevel, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<CollateralCurrentRate>', authSettings);
    }
}
exports.MultiCollateralLoanApi = MultiCollateralLoanApi;
