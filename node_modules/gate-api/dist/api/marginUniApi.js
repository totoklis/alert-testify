"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarginUniApi = void 0;
const models_1 = require("../model/models");
const apiClient_1 = require("./apiClient");
class MarginUniApi {
    constructor(client) {
        if (client) {
            this.client = client;
        }
        else {
            this.client = new apiClient_1.ApiClient();
        }
    }
    async listUniCurrencyPairs() {
        const localVarPath = this.client.basePath + '/margin/uni/currency_pairs';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<UniCurrencyPair>', authSettings);
    }
    async getUniCurrencyPair(currencyPair) {
        const localVarPath = this.client.basePath +
            '/margin/uni/currency_pairs/{currency_pair}'.replace('{' + 'currency_pair' + '}', encodeURIComponent(String(currencyPair)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currencyPair === null || currencyPair === undefined) {
            throw new Error('Required parameter currencyPair was null or undefined when calling getUniCurrencyPair.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'UniCurrencyPair', authSettings);
    }
    async getMarginUniEstimateRate(currencies) {
        const localVarPath = this.client.basePath + '/margin/uni/estimate_rate';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currencies === null || currencies === undefined) {
            throw new Error('Required parameter currencies was null or undefined when calling getMarginUniEstimateRate.');
        }
        localVarQueryParameters['currencies'] = models_1.ObjectSerializer.serialize(currencies, 'Array<string>');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '{ [key: string]: string; }', authSettings);
    }
    async listUniLoans(opts) {
        const localVarPath = this.client.basePath + '/margin/uni/loans';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currencyPair !== undefined) {
            localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(opts.currencyPair, 'string');
        }
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<UniLoan>', authSettings);
    }
    async createUniLoan(createUniLoan) {
        const localVarPath = this.client.basePath + '/margin/uni/loans';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        if (createUniLoan === null || createUniLoan === undefined) {
            throw new Error('Required parameter createUniLoan was null or undefined when calling createUniLoan.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(createUniLoan, 'CreateUniLoan'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '', authSettings);
    }
    async listUniLoanRecords(opts) {
        const localVarPath = this.client.basePath + '/margin/uni/loan_records';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(opts.type, "'borrow' | 'repay'");
        }
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.currencyPair !== undefined) {
            localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(opts.currencyPair, 'string');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<UniLoanRecord>', authSettings);
    }
    async listUniLoanInterestRecords(opts) {
        const localVarPath = this.client.basePath + '/margin/uni/interest_records';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currencyPair !== undefined) {
            localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(opts.currencyPair, 'string');
        }
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<UniLoanInterestRecord>', authSettings);
    }
    async getUniBorrowable(currency, currencyPair) {
        const localVarPath = this.client.basePath + '/margin/uni/borrowable';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getUniBorrowable.');
        }
        if (currencyPair === null || currencyPair === undefined) {
            throw new Error('Required parameter currencyPair was null or undefined when calling getUniBorrowable.');
        }
        localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(currency, 'string');
        localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(currencyPair, 'string');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'MaxUniBorrowable', authSettings);
    }
}
exports.MarginUniApi = MarginUniApi;
