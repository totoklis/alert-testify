"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnifiedApi = void 0;
const models_1 = require("../model/models");
const apiClient_1 = require("./apiClient");
class UnifiedApi {
    constructor(client) {
        if (client) {
            this.client = client;
        }
        else {
            this.client = new apiClient_1.ApiClient();
        }
    }
    async listUnifiedAccounts(opts) {
        const localVarPath = this.client.basePath + '/unified/accounts';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.subUid !== undefined) {
            localVarQueryParameters['sub_uid'] = models_1.ObjectSerializer.serialize(opts.subUid, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'UnifiedAccount', authSettings);
    }
    async getUnifiedBorrowable(currency) {
        const localVarPath = this.client.basePath + '/unified/borrowable';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getUnifiedBorrowable.');
        }
        localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(currency, 'string');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'UnifiedBorrowable', authSettings);
    }
    async getUnifiedTransferable(currency) {
        const localVarPath = this.client.basePath + '/unified/transferable';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getUnifiedTransferable.');
        }
        localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(currency, 'string');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'UnifiedTransferable', authSettings);
    }
    async getUnifiedTransferables(currencies) {
        const localVarPath = this.client.basePath + '/unified/transferables';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currencies === null || currencies === undefined) {
            throw new Error('Required parameter currencies was null or undefined when calling getUnifiedTransferables.');
        }
        localVarQueryParameters['currencies'] = models_1.ObjectSerializer.serialize(currencies, 'string');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<TransferablesResult>', authSettings);
    }
    async getUnifiedBorrowableList(currencies) {
        const localVarPath = this.client.basePath + '/unified/batch_borrowable';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currencies === null || currencies === undefined) {
            throw new Error('Required parameter currencies was null or undefined when calling getUnifiedBorrowableList.');
        }
        localVarQueryParameters['currencies'] = models_1.ObjectSerializer.serialize(currencies, 'Array<string>');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<UnifiedBorrowable1>', authSettings);
    }
    async listUnifiedLoans(opts) {
        const localVarPath = this.client.basePath + '/unified/loans';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(opts.type, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<UniLoan>', authSettings);
    }
    async createUnifiedLoan(unifiedLoan) {
        const localVarPath = this.client.basePath + '/unified/loans';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (unifiedLoan === null || unifiedLoan === undefined) {
            throw new Error('Required parameter unifiedLoan was null or undefined when calling createUnifiedLoan.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(unifiedLoan, 'UnifiedLoan'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'UnifiedLoanResult', authSettings);
    }
    async listUnifiedLoanRecords(opts) {
        const localVarPath = this.client.basePath + '/unified/loan_records';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(opts.type, 'string');
        }
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<UnifiedLoanRecord>', authSettings);
    }
    async listUnifiedLoanInterestRecords(opts) {
        const localVarPath = this.client.basePath + '/unified/interest_records';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(opts.type, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<UniLoanInterestRecord>', authSettings);
    }
    async getUnifiedRiskUnits() {
        const localVarPath = this.client.basePath + '/unified/risk_units';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'UnifiedRiskUnits', authSettings);
    }
    async getUnifiedMode() {
        const localVarPath = this.client.basePath + '/unified/unified_mode';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'UnifiedModeSet', authSettings);
    }
    async setUnifiedMode(unifiedModeSet) {
        const localVarPath = this.client.basePath + '/unified/unified_mode';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        if (unifiedModeSet === null || unifiedModeSet === undefined) {
            throw new Error('Required parameter unifiedModeSet was null or undefined when calling setUnifiedMode.');
        }
        const config = {
            method: 'PUT',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(unifiedModeSet, 'UnifiedModeSet'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '', authSettings);
    }
    async getUnifiedEstimateRate(currencies) {
        const localVarPath = this.client.basePath + '/unified/estimate_rate';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currencies === null || currencies === undefined) {
            throw new Error('Required parameter currencies was null or undefined when calling getUnifiedEstimateRate.');
        }
        localVarQueryParameters['currencies'] = models_1.ObjectSerializer.serialize(currencies, 'Array<string>');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '{ [key: string]: string; }', authSettings);
    }
    async listCurrencyDiscountTiers() {
        const localVarPath = this.client.basePath + '/unified/currency_discount_tiers';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<UnifiedDiscount>', authSettings);
    }
    async listLoanMarginTiers() {
        const localVarPath = this.client.basePath + '/unified/loan_margin_tiers';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<UnifiedMarginTiers>', authSettings);
    }
    async calculatePortfolioMargin(unifiedPortfolioInput) {
        const localVarPath = this.client.basePath + '/unified/portfolio_calculator';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (unifiedPortfolioInput === null || unifiedPortfolioInput === undefined) {
            throw new Error('Required parameter unifiedPortfolioInput was null or undefined when calling calculatePortfolioMargin.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(unifiedPortfolioInput, 'UnifiedPortfolioInput'),
        };
        const authSettings = [];
        return this.client.request(config, 'UnifiedPortfolioOutput', authSettings);
    }
    async getUserLeverageCurrencyConfig(currency) {
        const localVarPath = this.client.basePath + '/unified/leverage/user_currency_config';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getUserLeverageCurrencyConfig.');
        }
        localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(currency, 'string');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'UnifiedLeverageConfig', authSettings);
    }
    async getUserLeverageCurrencySetting(opts) {
        const localVarPath = this.client.basePath + '/unified/leverage/user_currency_setting';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'UnifiedLeverageSetting', authSettings);
    }
    async setUserLeverageCurrencySetting(unifiedLeverageSetting) {
        const localVarPath = this.client.basePath + '/unified/leverage/user_currency_setting';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        if (unifiedLeverageSetting === null || unifiedLeverageSetting === undefined) {
            throw new Error('Required parameter unifiedLeverageSetting was null or undefined when calling setUserLeverageCurrencySetting.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(unifiedLeverageSetting, 'UnifiedLeverageSetting'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '', authSettings);
    }
    async listUnifiedCurrencies(opts) {
        const localVarPath = this.client.basePath + '/unified/currencies';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<UnifiedCurrency>', authSettings);
    }
    async getHistoryLoanRate(currency, opts) {
        const localVarPath = this.client.basePath + '/unified/history_loan_rate';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getHistoryLoanRate.');
        }
        opts = opts || {};
        if (opts.tier !== undefined) {
            localVarQueryParameters['tier'] = models_1.ObjectSerializer.serialize(opts.tier, 'string');
        }
        localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(currency, 'string');
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'UnifiedHistoryLoanRate', authSettings);
    }
}
exports.UnifiedApi = UnifiedApi;
