"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarginApi = void 0;
const models_1 = require("../model/models");
const apiClient_1 = require("./apiClient");
class MarginApi {
    constructor(client) {
        if (client) {
            this.client = client;
        }
        else {
            this.client = new apiClient_1.ApiClient();
        }
    }
    async listMarginAccounts(opts) {
        const localVarPath = this.client.basePath + '/margin/accounts';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currencyPair !== undefined) {
            localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(opts.currencyPair, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<MarginAccount>', authSettings);
    }
    async listMarginAccountBook(opts) {
        const localVarPath = this.client.basePath + '/margin/account_book';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.currencyPair !== undefined) {
            localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(opts.currencyPair, 'string');
        }
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(opts.type, 'string');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<MarginAccountBook>', authSettings);
    }
    async listFundingAccounts(opts) {
        const localVarPath = this.client.basePath + '/margin/funding_accounts';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<FundingAccount>', authSettings);
    }
    async getAutoRepayStatus() {
        const localVarPath = this.client.basePath + '/margin/auto_repay';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'AutoRepaySetting', authSettings);
    }
    async setAutoRepay(status) {
        const localVarPath = this.client.basePath + '/margin/auto_repay';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling setAutoRepay.');
        }
        localVarQueryParameters['status'] = models_1.ObjectSerializer.serialize(status, 'string');
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'AutoRepaySetting', authSettings);
    }
    async getMarginTransferable(currency, opts) {
        const localVarPath = this.client.basePath + '/margin/transferable';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getMarginTransferable.');
        }
        opts = opts || {};
        localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(currency, 'string');
        if (opts.currencyPair !== undefined) {
            localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(opts.currencyPair, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'MarginTransferable', authSettings);
    }
    async listCrossMarginCurrencies() {
        const localVarPath = this.client.basePath + '/margin/cross/currencies';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<CrossMarginCurrency>', authSettings);
    }
    async getCrossMarginCurrency(currency) {
        const localVarPath = this.client.basePath +
            '/margin/cross/currencies/{currency}'.replace('{' + 'currency' + '}', encodeURIComponent(String(currency)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getCrossMarginCurrency.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'CrossMarginCurrency', authSettings);
    }
    async getCrossMarginAccount() {
        const localVarPath = this.client.basePath + '/margin/cross/accounts';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'CrossMarginAccount', authSettings);
    }
    async listCrossMarginAccountBook(opts) {
        const localVarPath = this.client.basePath + '/margin/cross/account_book';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(opts.type, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<CrossMarginAccountBook>', authSettings);
    }
    async listCrossMarginLoans(status, opts) {
        const localVarPath = this.client.basePath + '/margin/cross/loans';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling listCrossMarginLoans.');
        }
        opts = opts || {};
        localVarQueryParameters['status'] = models_1.ObjectSerializer.serialize(status, 'number');
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        if (opts.reverse !== undefined) {
            localVarQueryParameters['reverse'] = models_1.ObjectSerializer.serialize(opts.reverse, 'boolean');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<CrossMarginLoan>', authSettings);
    }
    async createCrossMarginLoan(crossMarginLoan) {
        const localVarPath = this.client.basePath + '/margin/cross/loans';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (crossMarginLoan === null || crossMarginLoan === undefined) {
            throw new Error('Required parameter crossMarginLoan was null or undefined when calling createCrossMarginLoan.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(crossMarginLoan, 'CrossMarginLoan'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'CrossMarginLoan', authSettings);
    }
    async getCrossMarginLoan(loanId) {
        const localVarPath = this.client.basePath +
            '/margin/cross/loans/{loan_id}'.replace('{' + 'loan_id' + '}', encodeURIComponent(String(loanId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling getCrossMarginLoan.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'CrossMarginLoan', authSettings);
    }
    async listCrossMarginRepayments(opts) {
        const localVarPath = this.client.basePath + '/margin/cross/repayments';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.loanId !== undefined) {
            localVarQueryParameters['loan_id'] = models_1.ObjectSerializer.serialize(opts.loanId, 'string');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        if (opts.reverse !== undefined) {
            localVarQueryParameters['reverse'] = models_1.ObjectSerializer.serialize(opts.reverse, 'boolean');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<CrossMarginRepayment>', authSettings);
    }
    async repayCrossMarginLoan(crossMarginRepayRequest) {
        const localVarPath = this.client.basePath + '/margin/cross/repayments';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (crossMarginRepayRequest === null || crossMarginRepayRequest === undefined) {
            throw new Error('Required parameter crossMarginRepayRequest was null or undefined when calling repayCrossMarginLoan.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(crossMarginRepayRequest, 'CrossMarginRepayRequest'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<CrossMarginLoan>', authSettings);
    }
    async getCrossMarginInterestRecords(opts) {
        const localVarPath = this.client.basePath + '/margin/cross/interest_records';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<UniLoanInterestRecord>', authSettings);
    }
    async getCrossMarginTransferable(currency) {
        const localVarPath = this.client.basePath + '/margin/cross/transferable';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getCrossMarginTransferable.');
        }
        localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(currency, 'string');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'CrossMarginTransferable', authSettings);
    }
    async getCrossMarginEstimateRate(currencies) {
        const localVarPath = this.client.basePath + '/margin/cross/estimate_rate';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currencies === null || currencies === undefined) {
            throw new Error('Required parameter currencies was null or undefined when calling getCrossMarginEstimateRate.');
        }
        localVarQueryParameters['currencies'] = models_1.ObjectSerializer.serialize(currencies, 'Array<string>');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '{ [key: string]: string; }', authSettings);
    }
    async getCrossMarginBorrowable(currency) {
        const localVarPath = this.client.basePath + '/margin/cross/borrowable';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling getCrossMarginBorrowable.');
        }
        localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(currency, 'string');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'UnifiedBorrowable', authSettings);
    }
    async getUserMarginTier(currencyPair) {
        const localVarPath = this.client.basePath + '/margin/user/loan_margin_tiers';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currencyPair === null || currencyPair === undefined) {
            throw new Error('Required parameter currencyPair was null or undefined when calling getUserMarginTier.');
        }
        localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(currencyPair, 'string');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<MarginLeverageTier>', authSettings);
    }
    async getMarketMarginTier(currencyPair) {
        const localVarPath = this.client.basePath + '/margin/loan_margin_tiers';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (currencyPair === null || currencyPair === undefined) {
            throw new Error('Required parameter currencyPair was null or undefined when calling getMarketMarginTier.');
        }
        localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(currencyPair, 'string');
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<MarginLeverageTier>', authSettings);
    }
    async setUserMarketLeverage(marginMarketLeverage) {
        const localVarPath = this.client.basePath + '/margin/leverage/user_market_setting';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        if (marginMarketLeverage === null || marginMarketLeverage === undefined) {
            throw new Error('Required parameter marginMarketLeverage was null or undefined when calling setUserMarketLeverage.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(marginMarketLeverage, 'MarginMarketLeverage'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '', authSettings);
    }
    async listMarginUserAccount(opts) {
        const localVarPath = this.client.basePath + '/margin/user/account';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currencyPair !== undefined) {
            localVarQueryParameters['currency_pair'] = models_1.ObjectSerializer.serialize(opts.currencyPair, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<MarginAccount>', authSettings);
    }
}
exports.MarginApi = MarginApi;
