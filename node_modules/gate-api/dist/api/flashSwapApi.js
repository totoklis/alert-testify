"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlashSwapApi = void 0;
const models_1 = require("../model/models");
const apiClient_1 = require("./apiClient");
class FlashSwapApi {
    constructor(client) {
        if (client) {
            this.client = client;
        }
        else {
            this.client = new apiClient_1.ApiClient();
        }
    }
    async listFlashSwapCurrencyPair(opts) {
        const localVarPath = this.client.basePath + '/flash_swap/currency_pairs';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.currency !== undefined) {
            localVarQueryParameters['currency'] = models_1.ObjectSerializer.serialize(opts.currency, 'string');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<FlashSwapCurrencyPair>', authSettings);
    }
    async listFlashSwapOrders(opts) {
        const localVarPath = this.client.basePath + '/flash_swap/orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.status !== undefined) {
            localVarQueryParameters['status'] = models_1.ObjectSerializer.serialize(opts.status, 'number');
        }
        if (opts.sellCurrency !== undefined) {
            localVarQueryParameters['sell_currency'] = models_1.ObjectSerializer.serialize(opts.sellCurrency, 'string');
        }
        if (opts.buyCurrency !== undefined) {
            localVarQueryParameters['buy_currency'] = models_1.ObjectSerializer.serialize(opts.buyCurrency, 'string');
        }
        if (opts.reverse !== undefined) {
            localVarQueryParameters['reverse'] = models_1.ObjectSerializer.serialize(opts.reverse, 'boolean');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<FlashSwapOrder>', authSettings);
    }
    async createFlashSwapOrder(flashSwapOrderRequest) {
        const localVarPath = this.client.basePath + '/flash_swap/orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (flashSwapOrderRequest === null || flashSwapOrderRequest === undefined) {
            throw new Error('Required parameter flashSwapOrderRequest was null or undefined when calling createFlashSwapOrder.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(flashSwapOrderRequest, 'FlashSwapOrderRequest'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'FlashSwapOrder', authSettings);
    }
    async getFlashSwapOrder(orderId) {
        const localVarPath = this.client.basePath +
            '/flash_swap/orders/{order_id}'.replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getFlashSwapOrder.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'FlashSwapOrder', authSettings);
    }
    async previewFlashSwapOrder(flashSwapPreviewRequest) {
        const localVarPath = this.client.basePath + '/flash_swap/orders/preview';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (flashSwapPreviewRequest === null || flashSwapPreviewRequest === undefined) {
            throw new Error('Required parameter flashSwapPreviewRequest was null or undefined when calling previewFlashSwapOrder.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(flashSwapPreviewRequest, 'FlashSwapPreviewRequest'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'FlashSwapOrderPreview', authSettings);
    }
}
exports.FlashSwapApi = FlashSwapApi;
