import { ConvertSmallBalance } from '../model/convertSmallBalance';
import { CurrencyChain } from '../model/currencyChain';
import { DepositAddress } from '../model/depositAddress';
import { DepositRecord } from '../model/depositRecord';
import { SavedAddress } from '../model/savedAddress';
import { SmallBalance } from '../model/smallBalance';
import { SmallBalanceHistory } from '../model/smallBalanceHistory';
import { SubAccountBalance } from '../model/subAccountBalance';
import { SubAccountCrossMarginBalance } from '../model/subAccountCrossMarginBalance';
import { SubAccountFuturesBalance } from '../model/subAccountFuturesBalance';
import { SubAccountMarginBalance } from '../model/subAccountMarginBalance';
import { SubAccountToSubAccount } from '../model/subAccountToSubAccount';
import { SubAccountTransfer } from '../model/subAccountTransfer';
import { TotalBalance } from '../model/totalBalance';
import { TradeFee } from '../model/tradeFee';
import { TransactionID } from '../model/transactionID';
import { Transfer } from '../model/transfer';
import { TransferOrderStatus } from '../model/transferOrderStatus';
import { UidPushOrder } from '../model/uidPushOrder';
import { WithdrawStatus } from '../model/withdrawStatus';
import { WithdrawalRecord } from '../model/withdrawalRecord';
import { ApiClient } from './apiClient';
import { AxiosResponse } from 'axios';
export declare class WalletApi {
    protected client: ApiClient;
    constructor(client?: ApiClient);
    listCurrencyChains(currency: string): Promise<{
        response: AxiosResponse;
        body: Array<CurrencyChain>;
    }>;
    getDepositAddress(currency: string): Promise<{
        response: AxiosResponse;
        body: DepositAddress;
    }>;
    listWithdrawals(opts: {
        currency?: string;
        withdrawId?: string;
        assetClass?: string;
        withdrawOrderId?: string;
        from?: number;
        to?: number;
        limit?: number;
        offset?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<WithdrawalRecord>;
    }>;
    listDeposits(opts: {
        currency?: string;
        from?: number;
        to?: number;
        limit?: number;
        offset?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<DepositRecord>;
    }>;
    transfer(transfer: Transfer): Promise<{
        response: AxiosResponse;
        body: TransactionID;
    }>;
    listSubAccountTransfers(opts: {
        subUid?: string;
        from?: number;
        to?: number;
        limit?: number;
        offset?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<SubAccountTransfer>;
    }>;
    transferWithSubAccount(subAccountTransfer: SubAccountTransfer): Promise<{
        response: AxiosResponse;
        body: TransactionID;
    }>;
    subAccountToSubAccount(subAccountToSubAccount: SubAccountToSubAccount): Promise<{
        response: AxiosResponse;
        body: TransactionID;
    }>;
    getTransferOrderStatus(opts: {
        clientOrderId?: string;
        txId?: string;
    }): Promise<{
        response: AxiosResponse;
        body: TransferOrderStatus;
    }>;
    listWithdrawStatus(opts: {
        currency?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<WithdrawStatus>;
    }>;
    listSubAccountBalances(opts: {
        subUid?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<SubAccountBalance>;
    }>;
    listSubAccountMarginBalances(opts: {
        subUid?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<SubAccountMarginBalance>;
    }>;
    listSubAccountFuturesBalances(opts: {
        subUid?: string;
        settle?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<SubAccountFuturesBalance>;
    }>;
    listSubAccountCrossMarginBalances(opts: {
        subUid?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<SubAccountCrossMarginBalance>;
    }>;
    listSavedAddress(currency: string, opts: {
        chain?: string;
        limit?: string;
        page?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<SavedAddress>;
    }>;
    getTradeFee(opts: {
        currencyPair?: string;
        settle?: 'BTC' | 'USDT' | 'USD';
    }): Promise<{
        response: AxiosResponse;
        body: TradeFee;
    }>;
    getTotalBalance(opts: {
        currency?: string;
    }): Promise<{
        response: AxiosResponse;
        body: TotalBalance;
    }>;
    listSmallBalance(): Promise<{
        response: AxiosResponse;
        body: Array<SmallBalance>;
    }>;
    convertSmallBalance(convertSmallBalance: ConvertSmallBalance): Promise<{
        response: AxiosResponse;
        body?: any;
    }>;
    listSmallBalanceHistory(opts: {
        currency?: string;
        page?: number;
        limit?: number;
    }): Promise<{
        response: AxiosResponse;
        body: Array<SmallBalanceHistory>;
    }>;
    listPushOrders(opts: {
        id?: number;
        from?: number;
        to?: number;
        limit?: number;
        offset?: number;
        transactionType?: string;
    }): Promise<{
        response: AxiosResponse;
        body: Array<UidPushOrder>;
    }>;
}
