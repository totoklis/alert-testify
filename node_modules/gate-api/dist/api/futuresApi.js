"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FuturesApi = void 0;
const models_1 = require("../model/models");
const apiClient_1 = require("./apiClient");
class FuturesApi {
    constructor(client) {
        if (client) {
            this.client = client;
        }
        else {
            this.client = new apiClient_1.ApiClient();
        }
    }
    async listFuturesContracts(settle, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/contracts'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listFuturesContracts.');
        }
        opts = opts || {};
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<Contract>', authSettings);
    }
    async getFuturesContract(settle, contract) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/contracts/{contract}'
                .replace('{' + 'settle' + '}', encodeURIComponent(String(settle)))
                .replace('{' + 'contract' + '}', encodeURIComponent(String(contract)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling getFuturesContract.');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling getFuturesContract.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Contract', authSettings);
    }
    async listFuturesOrderBook(settle, contract, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/order_book'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listFuturesOrderBook.');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling listFuturesOrderBook.');
        }
        opts = opts || {};
        localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(contract, 'string');
        if (opts.interval !== undefined) {
            localVarQueryParameters['interval'] = models_1.ObjectSerializer.serialize(opts.interval, 'string');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.withId !== undefined) {
            localVarQueryParameters['with_id'] = models_1.ObjectSerializer.serialize(opts.withId, 'boolean');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'FuturesOrderBook', authSettings);
    }
    async listFuturesTrades(settle, contract, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/trades'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listFuturesTrades.');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling listFuturesTrades.');
        }
        opts = opts || {};
        localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(contract, 'string');
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        if (opts.lastId !== undefined) {
            localVarQueryParameters['last_id'] = models_1.ObjectSerializer.serialize(opts.lastId, 'string');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<FuturesTrade>', authSettings);
    }
    async listFuturesCandlesticks(settle, contract, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/candlesticks'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listFuturesCandlesticks.');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling listFuturesCandlesticks.');
        }
        opts = opts || {};
        localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(contract, 'string');
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.interval !== undefined) {
            localVarQueryParameters['interval'] = models_1.ObjectSerializer.serialize(opts.interval, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<FuturesCandlestick>', authSettings);
    }
    async listFuturesPremiumIndex(settle, contract, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/premium_index'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listFuturesPremiumIndex.');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling listFuturesPremiumIndex.');
        }
        opts = opts || {};
        localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(contract, 'string');
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.interval !== undefined) {
            localVarQueryParameters['interval'] = models_1.ObjectSerializer.serialize(opts.interval, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<FuturesPremiumIndex>', authSettings);
    }
    async listFuturesTickers(settle, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/tickers'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listFuturesTickers.');
        }
        opts = opts || {};
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<FuturesTicker>', authSettings);
    }
    async listFuturesFundingRateHistory(settle, contract, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/funding_rate'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listFuturesFundingRateHistory.');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling listFuturesFundingRateHistory.');
        }
        opts = opts || {};
        localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(contract, 'string');
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<FundingRateRecord>', authSettings);
    }
    async listFuturesInsuranceLedger(settle, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/insurance'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listFuturesInsuranceLedger.');
        }
        opts = opts || {};
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<InsuranceRecord>', authSettings);
    }
    async listContractStats(settle, contract, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/contract_stats'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listContractStats.');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling listContractStats.');
        }
        opts = opts || {};
        localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(contract, 'string');
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.interval !== undefined) {
            localVarQueryParameters['interval'] = models_1.ObjectSerializer.serialize(opts.interval, 'string');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<ContractStat>', authSettings);
    }
    async getIndexConstituents(settle, index) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/index_constituents/{index}'
                .replace('{' + 'settle' + '}', encodeURIComponent(String(settle)))
                .replace('{' + 'index' + '}', encodeURIComponent(String(index)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling getIndexConstituents.');
        }
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling getIndexConstituents.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'FuturesIndexConstituents', authSettings);
    }
    async listLiquidatedOrders(settle, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/liq_orders'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listLiquidatedOrders.');
        }
        opts = opts || {};
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<FuturesLiqOrder>', authSettings);
    }
    async listFuturesRiskLimitTiers(settle, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/risk_limit_tiers'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listFuturesRiskLimitTiers.');
        }
        opts = opts || {};
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<FuturesLimitRiskTiers>', authSettings);
    }
    async listFuturesAccounts(settle) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/accounts'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listFuturesAccounts.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'FuturesAccount', authSettings);
    }
    async listFuturesAccountBook(settle, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/account_book'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listFuturesAccountBook.');
        }
        opts = opts || {};
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(opts.type, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<FuturesAccountBook>', authSettings);
    }
    async listPositions(settle, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/positions'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listPositions.');
        }
        opts = opts || {};
        if (opts.holding !== undefined) {
            localVarQueryParameters['holding'] = models_1.ObjectSerializer.serialize(opts.holding, 'boolean');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<Position>', authSettings);
    }
    async getPosition(settle, contract) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/positions/{contract}'
                .replace('{' + 'settle' + '}', encodeURIComponent(String(settle)))
                .replace('{' + 'contract' + '}', encodeURIComponent(String(contract)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling getPosition.');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling getPosition.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Position', authSettings);
    }
    async updatePositionMargin(settle, contract, change) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/positions/{contract}/margin'
                .replace('{' + 'settle' + '}', encodeURIComponent(String(settle)))
                .replace('{' + 'contract' + '}', encodeURIComponent(String(contract)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling updatePositionMargin.');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling updatePositionMargin.');
        }
        if (change === null || change === undefined) {
            throw new Error('Required parameter change was null or undefined when calling updatePositionMargin.');
        }
        localVarQueryParameters['change'] = models_1.ObjectSerializer.serialize(change, 'string');
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Position', authSettings);
    }
    async updatePositionLeverage(settle, contract, leverage, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/positions/{contract}/leverage'
                .replace('{' + 'settle' + '}', encodeURIComponent(String(settle)))
                .replace('{' + 'contract' + '}', encodeURIComponent(String(contract)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling updatePositionLeverage.');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling updatePositionLeverage.');
        }
        if (leverage === null || leverage === undefined) {
            throw new Error('Required parameter leverage was null or undefined when calling updatePositionLeverage.');
        }
        opts = opts || {};
        localVarQueryParameters['leverage'] = models_1.ObjectSerializer.serialize(leverage, 'string');
        if (opts.crossLeverageLimit !== undefined) {
            localVarQueryParameters['cross_leverage_limit'] = models_1.ObjectSerializer.serialize(opts.crossLeverageLimit, 'string');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Position', authSettings);
    }
    async updatePositionCrossMode(settle, inlineObject) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/positions/cross_mode'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling updatePositionCrossMode.');
        }
        if (inlineObject === null || inlineObject === undefined) {
            throw new Error('Required parameter inlineObject was null or undefined when calling updatePositionCrossMode.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(inlineObject, 'InlineObject'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Position', authSettings);
    }
    async updatePositionRiskLimit(settle, contract, riskLimit) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/positions/{contract}/risk_limit'
                .replace('{' + 'settle' + '}', encodeURIComponent(String(settle)))
                .replace('{' + 'contract' + '}', encodeURIComponent(String(contract)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling updatePositionRiskLimit.');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling updatePositionRiskLimit.');
        }
        if (riskLimit === null || riskLimit === undefined) {
            throw new Error('Required parameter riskLimit was null or undefined when calling updatePositionRiskLimit.');
        }
        localVarQueryParameters['risk_limit'] = models_1.ObjectSerializer.serialize(riskLimit, 'string');
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Position', authSettings);
    }
    async setDualMode(settle, dualMode) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/dual_mode'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling setDualMode.');
        }
        if (dualMode === null || dualMode === undefined) {
            throw new Error('Required parameter dualMode was null or undefined when calling setDualMode.');
        }
        localVarQueryParameters['dual_mode'] = models_1.ObjectSerializer.serialize(dualMode, 'boolean');
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'FuturesAccount', authSettings);
    }
    async getDualModePosition(settle, contract) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/dual_comp/positions/{contract}'
                .replace('{' + 'settle' + '}', encodeURIComponent(String(settle)))
                .replace('{' + 'contract' + '}', encodeURIComponent(String(contract)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling getDualModePosition.');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling getDualModePosition.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<Position>', authSettings);
    }
    async updateDualModePositionMargin(settle, contract, change, dualSide) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/dual_comp/positions/{contract}/margin'
                .replace('{' + 'settle' + '}', encodeURIComponent(String(settle)))
                .replace('{' + 'contract' + '}', encodeURIComponent(String(contract)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling updateDualModePositionMargin.');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling updateDualModePositionMargin.');
        }
        if (change === null || change === undefined) {
            throw new Error('Required parameter change was null or undefined when calling updateDualModePositionMargin.');
        }
        if (dualSide === null || dualSide === undefined) {
            throw new Error('Required parameter dualSide was null or undefined when calling updateDualModePositionMargin.');
        }
        localVarQueryParameters['change'] = models_1.ObjectSerializer.serialize(change, 'string');
        localVarQueryParameters['dual_side'] = models_1.ObjectSerializer.serialize(dualSide, 'string');
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<Position>', authSettings);
    }
    async updateDualModePositionLeverage(settle, contract, leverage, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/dual_comp/positions/{contract}/leverage'
                .replace('{' + 'settle' + '}', encodeURIComponent(String(settle)))
                .replace('{' + 'contract' + '}', encodeURIComponent(String(contract)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling updateDualModePositionLeverage.');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling updateDualModePositionLeverage.');
        }
        if (leverage === null || leverage === undefined) {
            throw new Error('Required parameter leverage was null or undefined when calling updateDualModePositionLeverage.');
        }
        opts = opts || {};
        localVarQueryParameters['leverage'] = models_1.ObjectSerializer.serialize(leverage, 'string');
        if (opts.crossLeverageLimit !== undefined) {
            localVarQueryParameters['cross_leverage_limit'] = models_1.ObjectSerializer.serialize(opts.crossLeverageLimit, 'string');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<Position>', authSettings);
    }
    async updateDualModePositionRiskLimit(settle, contract, riskLimit) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/dual_comp/positions/{contract}/risk_limit'
                .replace('{' + 'settle' + '}', encodeURIComponent(String(settle)))
                .replace('{' + 'contract' + '}', encodeURIComponent(String(contract)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling updateDualModePositionRiskLimit.');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling updateDualModePositionRiskLimit.');
        }
        if (riskLimit === null || riskLimit === undefined) {
            throw new Error('Required parameter riskLimit was null or undefined when calling updateDualModePositionRiskLimit.');
        }
        localVarQueryParameters['risk_limit'] = models_1.ObjectSerializer.serialize(riskLimit, 'string');
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<Position>', authSettings);
    }
    async listFuturesOrders(settle, status, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/orders'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listFuturesOrders.');
        }
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling listFuturesOrders.');
        }
        opts = opts || {};
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        localVarQueryParameters['status'] = models_1.ObjectSerializer.serialize(status, 'string');
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        if (opts.lastId !== undefined) {
            localVarQueryParameters['last_id'] = models_1.ObjectSerializer.serialize(opts.lastId, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<FuturesOrder>', authSettings);
    }
    async createFuturesOrder(settle, futuresOrder, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/orders'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling createFuturesOrder.');
        }
        if (futuresOrder === null || futuresOrder === undefined) {
            throw new Error('Required parameter futuresOrder was null or undefined when calling createFuturesOrder.');
        }
        opts = opts || {};
        if (opts.xGateExptime !== undefined) {
            localVarHeaderParams['x-gate-exptime'] = models_1.ObjectSerializer.serialize(opts.xGateExptime, 'string');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(futuresOrder, 'FuturesOrder'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'FuturesOrder', authSettings);
    }
    async cancelFuturesOrders(settle, contract, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/orders'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling cancelFuturesOrders.');
        }
        if (contract === null || contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling cancelFuturesOrders.');
        }
        opts = opts || {};
        localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(contract, 'string');
        if (opts.side !== undefined) {
            localVarQueryParameters['side'] = models_1.ObjectSerializer.serialize(opts.side, 'string');
        }
        if (opts.xGateExptime !== undefined) {
            localVarHeaderParams['x-gate-exptime'] = models_1.ObjectSerializer.serialize(opts.xGateExptime, 'string');
        }
        const config = {
            method: 'DELETE',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<FuturesOrder>', authSettings);
    }
    async getOrdersWithTimeRange(settle, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/orders_timerange'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling getOrdersWithTimeRange.');
        }
        opts = opts || {};
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<FuturesOrder>', authSettings);
    }
    async createBatchFuturesOrder(settle, futuresOrder, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/batch_orders'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling createBatchFuturesOrder.');
        }
        if (futuresOrder === null || futuresOrder === undefined) {
            throw new Error('Required parameter futuresOrder was null or undefined when calling createBatchFuturesOrder.');
        }
        opts = opts || {};
        if (opts.xGateExptime !== undefined) {
            localVarHeaderParams['x-gate-exptime'] = models_1.ObjectSerializer.serialize(opts.xGateExptime, 'string');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(futuresOrder, 'Array<FuturesOrder>'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<BatchFuturesOrder>', authSettings);
    }
    async getFuturesOrder(settle, orderId) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/orders/{order_id}'
                .replace('{' + 'settle' + '}', encodeURIComponent(String(settle)))
                .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling getFuturesOrder.');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getFuturesOrder.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'FuturesOrder', authSettings);
    }
    async amendFuturesOrder(settle, orderId, futuresOrderAmendment, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/orders/{order_id}'
                .replace('{' + 'settle' + '}', encodeURIComponent(String(settle)))
                .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling amendFuturesOrder.');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling amendFuturesOrder.');
        }
        if (futuresOrderAmendment === null || futuresOrderAmendment === undefined) {
            throw new Error('Required parameter futuresOrderAmendment was null or undefined when calling amendFuturesOrder.');
        }
        opts = opts || {};
        if (opts.xGateExptime !== undefined) {
            localVarHeaderParams['x-gate-exptime'] = models_1.ObjectSerializer.serialize(opts.xGateExptime, 'string');
        }
        const config = {
            method: 'PUT',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(futuresOrderAmendment, 'FuturesOrderAmendment'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'FuturesOrder', authSettings);
    }
    async cancelFuturesOrder(settle, orderId, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/orders/{order_id}'
                .replace('{' + 'settle' + '}', encodeURIComponent(String(settle)))
                .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling cancelFuturesOrder.');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling cancelFuturesOrder.');
        }
        opts = opts || {};
        if (opts.xGateExptime !== undefined) {
            localVarHeaderParams['x-gate-exptime'] = models_1.ObjectSerializer.serialize(opts.xGateExptime, 'string');
        }
        const config = {
            method: 'DELETE',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'FuturesOrder', authSettings);
    }
    async getMyTrades(settle, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/my_trades'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling getMyTrades.');
        }
        opts = opts || {};
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        if (opts.order !== undefined) {
            localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(opts.order, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        if (opts.lastId !== undefined) {
            localVarQueryParameters['last_id'] = models_1.ObjectSerializer.serialize(opts.lastId, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<MyFuturesTrade>', authSettings);
    }
    async getMyTradesWithTimeRange(settle, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/my_trades_timerange'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling getMyTradesWithTimeRange.');
        }
        opts = opts || {};
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        if (opts.role !== undefined) {
            localVarQueryParameters['role'] = models_1.ObjectSerializer.serialize(opts.role, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<MyFuturesTradeTimeRange>', authSettings);
    }
    async listPositionClose(settle, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/position_close'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listPositionClose.');
        }
        opts = opts || {};
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.side !== undefined) {
            localVarQueryParameters['side'] = models_1.ObjectSerializer.serialize(opts.side, 'string');
        }
        if (opts.pnl !== undefined) {
            localVarQueryParameters['pnl'] = models_1.ObjectSerializer.serialize(opts.pnl, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<PositionClose>', authSettings);
    }
    async listLiquidates(settle, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/liquidates'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listLiquidates.');
        }
        opts = opts || {};
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.at !== undefined) {
            localVarQueryParameters['at'] = models_1.ObjectSerializer.serialize(opts.at, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<FuturesLiquidate>', authSettings);
    }
    async listAutoDeleverages(settle, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/auto_deleverages'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listAutoDeleverages.');
        }
        opts = opts || {};
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.at !== undefined) {
            localVarQueryParameters['at'] = models_1.ObjectSerializer.serialize(opts.at, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<FuturesAutoDeleverage>', authSettings);
    }
    async countdownCancelAllFutures(settle, countdownCancelAllFuturesTask) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/countdown_cancel_all'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling countdownCancelAllFutures.');
        }
        if (countdownCancelAllFuturesTask === null || countdownCancelAllFuturesTask === undefined) {
            throw new Error('Required parameter countdownCancelAllFuturesTask was null or undefined when calling countdownCancelAllFutures.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(countdownCancelAllFuturesTask, 'CountdownCancelAllFuturesTask'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'TriggerTime', authSettings);
    }
    async getFuturesFee(settle, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/fee'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling getFuturesFee.');
        }
        opts = opts || {};
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '{ [key: string]: FuturesFee; }', authSettings);
    }
    async cancelBatchFutureOrders(settle, requestBody, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/batch_cancel_orders'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling cancelBatchFutureOrders.');
        }
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling cancelBatchFutureOrders.');
        }
        opts = opts || {};
        if (opts.xGateExptime !== undefined) {
            localVarHeaderParams['x-gate-exptime'] = models_1.ObjectSerializer.serialize(opts.xGateExptime, 'string');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(requestBody, 'Array<string>'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<FutureCancelOrderResult>', authSettings);
    }
    async amendBatchFutureOrders(settle, batchAmendOrderReq, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/batch_amend_orders'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling amendBatchFutureOrders.');
        }
        if (batchAmendOrderReq === null || batchAmendOrderReq === undefined) {
            throw new Error('Required parameter batchAmendOrderReq was null or undefined when calling amendBatchFutureOrders.');
        }
        opts = opts || {};
        if (opts.xGateExptime !== undefined) {
            localVarHeaderParams['x-gate-exptime'] = models_1.ObjectSerializer.serialize(opts.xGateExptime, 'string');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(batchAmendOrderReq, 'Array<BatchAmendOrderReq>'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<BatchFuturesOrder>', authSettings);
    }
    async listPriceTriggeredOrders(settle, status, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/price_orders'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling listPriceTriggeredOrders.');
        }
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling listPriceTriggeredOrders.');
        }
        opts = opts || {};
        localVarQueryParameters['status'] = models_1.ObjectSerializer.serialize(status, "'open' | 'finished'");
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        if (opts.offset !== undefined) {
            localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(opts.offset, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<FuturesPriceTriggeredOrder>', authSettings);
    }
    async createPriceTriggeredOrder(settle, futuresPriceTriggeredOrder) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/price_orders'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling createPriceTriggeredOrder.');
        }
        if (futuresPriceTriggeredOrder === null || futuresPriceTriggeredOrder === undefined) {
            throw new Error('Required parameter futuresPriceTriggeredOrder was null or undefined when calling createPriceTriggeredOrder.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(futuresPriceTriggeredOrder, 'FuturesPriceTriggeredOrder'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'TriggerOrderResponse', authSettings);
    }
    async cancelPriceTriggeredOrderList(settle, opts) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/price_orders'.replace('{' + 'settle' + '}', encodeURIComponent(String(settle)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling cancelPriceTriggeredOrderList.');
        }
        opts = opts || {};
        if (opts.contract !== undefined) {
            localVarQueryParameters['contract'] = models_1.ObjectSerializer.serialize(opts.contract, 'string');
        }
        const config = {
            method: 'DELETE',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<FuturesPriceTriggeredOrder>', authSettings);
    }
    async getPriceTriggeredOrder(settle, orderId) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/price_orders/{order_id}'
                .replace('{' + 'settle' + '}', encodeURIComponent(String(settle)))
                .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling getPriceTriggeredOrder.');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getPriceTriggeredOrder.');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'FuturesPriceTriggeredOrder', authSettings);
    }
    async cancelPriceTriggeredOrder(settle, orderId) {
        const localVarPath = this.client.basePath +
            '/futures/{settle}/price_orders/{order_id}'
                .replace('{' + 'settle' + '}', encodeURIComponent(String(settle)))
                .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (settle === null || settle === undefined) {
            throw new Error('Required parameter settle was null or undefined when calling cancelPriceTriggeredOrder.');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling cancelPriceTriggeredOrder.');
        }
        const config = {
            method: 'DELETE',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'FuturesPriceTriggeredOrder', authSettings);
    }
}
exports.FuturesApi = FuturesApi;
