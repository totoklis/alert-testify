"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EarnApi = void 0;
const models_1 = require("../model/models");
const apiClient_1 = require("./apiClient");
class EarnApi {
    constructor(client) {
        if (client) {
            this.client = client;
        }
        else {
            this.client = new apiClient_1.ApiClient();
        }
    }
    async swapETH2(eth2Swap) {
        const localVarPath = this.client.basePath + '/earn/staking/eth2/swap';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        if (eth2Swap === null || eth2Swap === undefined) {
            throw new Error('Required parameter eth2Swap was null or undefined when calling swapETH2.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(eth2Swap, 'Eth2Swap'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '', authSettings);
    }
    async rateListETH2() {
        const localVarPath = this.client.basePath + '/earn/staking/eth2/rate_records';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<Eth2RateList>', authSettings);
    }
    async listDualInvestmentPlans(opts) {
        const localVarPath = this.client.basePath + '/earn/dual/investment_plan';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.planId !== undefined) {
            localVarQueryParameters['plan_id'] = models_1.ObjectSerializer.serialize(opts.planId, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<DualGetPlans>', authSettings);
    }
    async listDualOrders(opts) {
        const localVarPath = this.client.basePath + '/earn/dual/orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<DualGetOrders>', authSettings);
    }
    async placeDualOrder(placeDualInvestmentOrder) {
        const localVarPath = this.client.basePath + '/earn/dual/orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        if (placeDualInvestmentOrder === null || placeDualInvestmentOrder === undefined) {
            throw new Error('Required parameter placeDualInvestmentOrder was null or undefined when calling placeDualOrder.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(placeDualInvestmentOrder, 'PlaceDualInvestmentOrder'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '', authSettings);
    }
    async listStructuredProducts(status, opts) {
        const localVarPath = this.client.basePath + '/earn/structured/products';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling listStructuredProducts.');
        }
        opts = opts || {};
        if (opts.type !== undefined) {
            localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(opts.type, 'string');
        }
        localVarQueryParameters['status'] = models_1.ObjectSerializer.serialize(status, 'string');
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = [];
        return this.client.request(config, 'Array<StructuredGetProjectList>', authSettings);
    }
    async listStructuredOrders(opts) {
        const localVarPath = this.client.basePath + '/earn/structured/orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        const produces = ['application/json'];
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        opts = opts || {};
        if (opts.from !== undefined) {
            localVarQueryParameters['from'] = models_1.ObjectSerializer.serialize(opts.from, 'number');
        }
        if (opts.to !== undefined) {
            localVarQueryParameters['to'] = models_1.ObjectSerializer.serialize(opts.to, 'number');
        }
        if (opts.page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(opts.page, 'number');
        }
        if (opts.limit !== undefined) {
            localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(opts.limit, 'number');
        }
        const config = {
            method: 'GET',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, 'Array<StructuredOrderList>', authSettings);
    }
    async placeStructuredOrder(structuredBuy) {
        const localVarPath = this.client.basePath + '/earn/structured/orders';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.client.defaultHeaders);
        if (structuredBuy === null || structuredBuy === undefined) {
            throw new Error('Required parameter structuredBuy was null or undefined when calling placeStructuredOrder.');
        }
        const config = {
            method: 'POST',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            data: models_1.ObjectSerializer.serialize(structuredBuy, 'StructuredBuy'),
        };
        const authSettings = ['apiv4'];
        return this.client.request(config, '', authSettings);
    }
}
exports.EarnApi = EarnApi;
